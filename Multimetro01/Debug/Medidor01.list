
Medidor01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071fc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007384  08007384  00017384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073d8  080073d8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080073d8  080073d8  000173d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073e0  080073e0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080073e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000068  08007450  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08007450  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d3e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f8f  00000000  00000000  00038e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b9  00000000  00000000  0003d430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002979e  00000000  00000000  0003e5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aec2  00000000  00000000  00067d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109036  00000000  00000000  00082c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006410  00000000  00000000  0018bc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00192090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800736c 	.word	0x0800736c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800736c 	.word	0x0800736c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b970 	b.w	8000b2c <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9e08      	ldr	r6, [sp, #32]
 800086a:	460d      	mov	r5, r1
 800086c:	4604      	mov	r4, r0
 800086e:	460f      	mov	r7, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14a      	bne.n	800090a <__udivmoddi4+0xa6>
 8000874:	428a      	cmp	r2, r1
 8000876:	4694      	mov	ip, r2
 8000878:	d965      	bls.n	8000946 <__udivmoddi4+0xe2>
 800087a:	fab2 f382 	clz	r3, r2
 800087e:	b143      	cbz	r3, 8000892 <__udivmoddi4+0x2e>
 8000880:	fa02 fc03 	lsl.w	ip, r2, r3
 8000884:	f1c3 0220 	rsb	r2, r3, #32
 8000888:	409f      	lsls	r7, r3
 800088a:	fa20 f202 	lsr.w	r2, r0, r2
 800088e:	4317      	orrs	r7, r2
 8000890:	409c      	lsls	r4, r3
 8000892:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000896:	fa1f f58c 	uxth.w	r5, ip
 800089a:	fbb7 f1fe 	udiv	r1, r7, lr
 800089e:	0c22      	lsrs	r2, r4, #16
 80008a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008a8:	fb01 f005 	mul.w	r0, r1, r5
 80008ac:	4290      	cmp	r0, r2
 80008ae:	d90a      	bls.n	80008c6 <__udivmoddi4+0x62>
 80008b0:	eb1c 0202 	adds.w	r2, ip, r2
 80008b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008b8:	f080 811c 	bcs.w	8000af4 <__udivmoddi4+0x290>
 80008bc:	4290      	cmp	r0, r2
 80008be:	f240 8119 	bls.w	8000af4 <__udivmoddi4+0x290>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4462      	add	r2, ip
 80008c6:	1a12      	subs	r2, r2, r0
 80008c8:	b2a4      	uxth	r4, r4
 80008ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80008ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80008d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008d6:	fb00 f505 	mul.w	r5, r0, r5
 80008da:	42a5      	cmp	r5, r4
 80008dc:	d90a      	bls.n	80008f4 <__udivmoddi4+0x90>
 80008de:	eb1c 0404 	adds.w	r4, ip, r4
 80008e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80008e6:	f080 8107 	bcs.w	8000af8 <__udivmoddi4+0x294>
 80008ea:	42a5      	cmp	r5, r4
 80008ec:	f240 8104 	bls.w	8000af8 <__udivmoddi4+0x294>
 80008f0:	4464      	add	r4, ip
 80008f2:	3802      	subs	r0, #2
 80008f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008f8:	1b64      	subs	r4, r4, r5
 80008fa:	2100      	movs	r1, #0
 80008fc:	b11e      	cbz	r6, 8000906 <__udivmoddi4+0xa2>
 80008fe:	40dc      	lsrs	r4, r3
 8000900:	2300      	movs	r3, #0
 8000902:	e9c6 4300 	strd	r4, r3, [r6]
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	428b      	cmp	r3, r1
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0xbc>
 800090e:	2e00      	cmp	r6, #0
 8000910:	f000 80ed 	beq.w	8000aee <__udivmoddi4+0x28a>
 8000914:	2100      	movs	r1, #0
 8000916:	e9c6 0500 	strd	r0, r5, [r6]
 800091a:	4608      	mov	r0, r1
 800091c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000920:	fab3 f183 	clz	r1, r3
 8000924:	2900      	cmp	r1, #0
 8000926:	d149      	bne.n	80009bc <__udivmoddi4+0x158>
 8000928:	42ab      	cmp	r3, r5
 800092a:	d302      	bcc.n	8000932 <__udivmoddi4+0xce>
 800092c:	4282      	cmp	r2, r0
 800092e:	f200 80f8 	bhi.w	8000b22 <__udivmoddi4+0x2be>
 8000932:	1a84      	subs	r4, r0, r2
 8000934:	eb65 0203 	sbc.w	r2, r5, r3
 8000938:	2001      	movs	r0, #1
 800093a:	4617      	mov	r7, r2
 800093c:	2e00      	cmp	r6, #0
 800093e:	d0e2      	beq.n	8000906 <__udivmoddi4+0xa2>
 8000940:	e9c6 4700 	strd	r4, r7, [r6]
 8000944:	e7df      	b.n	8000906 <__udivmoddi4+0xa2>
 8000946:	b902      	cbnz	r2, 800094a <__udivmoddi4+0xe6>
 8000948:	deff      	udf	#255	; 0xff
 800094a:	fab2 f382 	clz	r3, r2
 800094e:	2b00      	cmp	r3, #0
 8000950:	f040 8090 	bne.w	8000a74 <__udivmoddi4+0x210>
 8000954:	1a8a      	subs	r2, r1, r2
 8000956:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800095a:	fa1f fe8c 	uxth.w	lr, ip
 800095e:	2101      	movs	r1, #1
 8000960:	fbb2 f5f7 	udiv	r5, r2, r7
 8000964:	fb07 2015 	mls	r0, r7, r5, r2
 8000968:	0c22      	lsrs	r2, r4, #16
 800096a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800096e:	fb0e f005 	mul.w	r0, lr, r5
 8000972:	4290      	cmp	r0, r2
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x124>
 8000976:	eb1c 0202 	adds.w	r2, ip, r2
 800097a:	f105 38ff 	add.w	r8, r5, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0x122>
 8000980:	4290      	cmp	r0, r2
 8000982:	f200 80cb 	bhi.w	8000b1c <__udivmoddi4+0x2b8>
 8000986:	4645      	mov	r5, r8
 8000988:	1a12      	subs	r2, r2, r0
 800098a:	b2a4      	uxth	r4, r4
 800098c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000990:	fb07 2210 	mls	r2, r7, r0, r2
 8000994:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000998:	fb0e fe00 	mul.w	lr, lr, r0
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x14e>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009a8:	d202      	bcs.n	80009b0 <__udivmoddi4+0x14c>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	f200 80bb 	bhi.w	8000b26 <__udivmoddi4+0x2c2>
 80009b0:	4610      	mov	r0, r2
 80009b2:	eba4 040e 	sub.w	r4, r4, lr
 80009b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ba:	e79f      	b.n	80008fc <__udivmoddi4+0x98>
 80009bc:	f1c1 0720 	rsb	r7, r1, #32
 80009c0:	408b      	lsls	r3, r1
 80009c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009ca:	fa05 f401 	lsl.w	r4, r5, r1
 80009ce:	fa20 f307 	lsr.w	r3, r0, r7
 80009d2:	40fd      	lsrs	r5, r7
 80009d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009d8:	4323      	orrs	r3, r4
 80009da:	fbb5 f8f9 	udiv	r8, r5, r9
 80009de:	fa1f fe8c 	uxth.w	lr, ip
 80009e2:	fb09 5518 	mls	r5, r9, r8, r5
 80009e6:	0c1c      	lsrs	r4, r3, #16
 80009e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009ec:	fb08 f50e 	mul.w	r5, r8, lr
 80009f0:	42a5      	cmp	r5, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	fa00 f001 	lsl.w	r0, r0, r1
 80009fa:	d90b      	bls.n	8000a14 <__udivmoddi4+0x1b0>
 80009fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000a00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a04:	f080 8088 	bcs.w	8000b18 <__udivmoddi4+0x2b4>
 8000a08:	42a5      	cmp	r5, r4
 8000a0a:	f240 8085 	bls.w	8000b18 <__udivmoddi4+0x2b4>
 8000a0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a12:	4464      	add	r4, ip
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	b29d      	uxth	r5, r3
 8000a18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a28:	45a6      	cmp	lr, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x1da>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a34:	d26c      	bcs.n	8000b10 <__udivmoddi4+0x2ac>
 8000a36:	45a6      	cmp	lr, r4
 8000a38:	d96a      	bls.n	8000b10 <__udivmoddi4+0x2ac>
 8000a3a:	3b02      	subs	r3, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a42:	fba3 9502 	umull	r9, r5, r3, r2
 8000a46:	eba4 040e 	sub.w	r4, r4, lr
 8000a4a:	42ac      	cmp	r4, r5
 8000a4c:	46c8      	mov	r8, r9
 8000a4e:	46ae      	mov	lr, r5
 8000a50:	d356      	bcc.n	8000b00 <__udivmoddi4+0x29c>
 8000a52:	d053      	beq.n	8000afc <__udivmoddi4+0x298>
 8000a54:	b156      	cbz	r6, 8000a6c <__udivmoddi4+0x208>
 8000a56:	ebb0 0208 	subs.w	r2, r0, r8
 8000a5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a62:	40ca      	lsrs	r2, r1
 8000a64:	40cc      	lsrs	r4, r1
 8000a66:	4317      	orrs	r7, r2
 8000a68:	e9c6 7400 	strd	r7, r4, [r6]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a74:	f1c3 0120 	rsb	r1, r3, #32
 8000a78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a80:	fa25 f101 	lsr.w	r1, r5, r1
 8000a84:	409d      	lsls	r5, r3
 8000a86:	432a      	orrs	r2, r5
 8000a88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a8c:	fa1f fe8c 	uxth.w	lr, ip
 8000a90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a94:	fb07 1510 	mls	r5, r7, r0, r1
 8000a98:	0c11      	lsrs	r1, r2, #16
 8000a9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000aa2:	428d      	cmp	r5, r1
 8000aa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x258>
 8000aaa:	eb1c 0101 	adds.w	r1, ip, r1
 8000aae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ab2:	d22f      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ab4:	428d      	cmp	r5, r1
 8000ab6:	d92d      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000ab8:	3802      	subs	r0, #2
 8000aba:	4461      	add	r1, ip
 8000abc:	1b49      	subs	r1, r1, r5
 8000abe:	b292      	uxth	r2, r2
 8000ac0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ac4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ac8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000acc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ad0:	4291      	cmp	r1, r2
 8000ad2:	d908      	bls.n	8000ae6 <__udivmoddi4+0x282>
 8000ad4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000adc:	d216      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000ade:	4291      	cmp	r1, r2
 8000ae0:	d914      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000ae2:	3d02      	subs	r5, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a52      	subs	r2, r2, r1
 8000ae8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aec:	e738      	b.n	8000960 <__udivmoddi4+0xfc>
 8000aee:	4631      	mov	r1, r6
 8000af0:	4630      	mov	r0, r6
 8000af2:	e708      	b.n	8000906 <__udivmoddi4+0xa2>
 8000af4:	4639      	mov	r1, r7
 8000af6:	e6e6      	b.n	80008c6 <__udivmoddi4+0x62>
 8000af8:	4610      	mov	r0, r2
 8000afa:	e6fb      	b.n	80008f4 <__udivmoddi4+0x90>
 8000afc:	4548      	cmp	r0, r9
 8000afe:	d2a9      	bcs.n	8000a54 <__udivmoddi4+0x1f0>
 8000b00:	ebb9 0802 	subs.w	r8, r9, r2
 8000b04:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	e7a3      	b.n	8000a54 <__udivmoddi4+0x1f0>
 8000b0c:	4645      	mov	r5, r8
 8000b0e:	e7ea      	b.n	8000ae6 <__udivmoddi4+0x282>
 8000b10:	462b      	mov	r3, r5
 8000b12:	e794      	b.n	8000a3e <__udivmoddi4+0x1da>
 8000b14:	4640      	mov	r0, r8
 8000b16:	e7d1      	b.n	8000abc <__udivmoddi4+0x258>
 8000b18:	46d0      	mov	r8, sl
 8000b1a:	e77b      	b.n	8000a14 <__udivmoddi4+0x1b0>
 8000b1c:	3d02      	subs	r5, #2
 8000b1e:	4462      	add	r2, ip
 8000b20:	e732      	b.n	8000988 <__udivmoddi4+0x124>
 8000b22:	4608      	mov	r0, r1
 8000b24:	e70a      	b.n	800093c <__udivmoddi4+0xd8>
 8000b26:	4464      	add	r4, ip
 8000b28:	3802      	subs	r0, #2
 8000b2a:	e742      	b.n	80009b2 <__udivmoddi4+0x14e>

08000b2c <__aeabi_idiv0>:
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f023 030f 	bic.w	r3, r3, #15
 8000b40:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	011b      	lsls	r3, r3, #4
 8000b46:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	f043 030c 	orr.w	r3, r3, #12
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	f043 030c 	orr.w	r3, r3, #12
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000b66:	7bbb      	ldrb	r3, [r7, #14]
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b70:	f107 0208 	add.w	r2, r7, #8
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2304      	movs	r3, #4
 8000b7a:	214e      	movs	r1, #78	; 0x4e
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <lcd_send_cmd+0x5c>)
 8000b7e:	f002 ffbb 	bl	8003af8 <HAL_I2C_Master_Transmit>
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000130 	.word	0x20000130

08000b90 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f023 030f 	bic.w	r3, r3, #15
 8000ba0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	011b      	lsls	r3, r3, #4
 8000ba6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	f043 030d 	orr.w	r3, r3, #13
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	f043 0309 	orr.w	r3, r3, #9
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000bbc:	7bbb      	ldrb	r3, [r7, #14]
 8000bbe:	f043 030d 	orr.w	r3, r3, #13
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000bc6:	7bbb      	ldrb	r3, [r7, #14]
 8000bc8:	f043 0309 	orr.w	r3, r3, #9
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bd0:	f107 0208 	add.w	r2, r7, #8
 8000bd4:	2364      	movs	r3, #100	; 0x64
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2304      	movs	r3, #4
 8000bda:	214e      	movs	r1, #78	; 0x4e
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <lcd_send_data+0x5c>)
 8000bde:	f002 ff8b 	bl	8003af8 <HAL_I2C_Master_Transmit>
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000130 	.word	0x20000130

08000bf0 <lcd_enviar>:

void lcd_enviar(char *string,int row,int col)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
	lcd_put_cur(row,col);
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	68b8      	ldr	r0, [r7, #8]
 8000c00:	f000 f81e 	bl	8000c40 <lcd_put_cur>
	lcd_send_string(string);
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f000 f877 	bl	8000cf8 <lcd_send_string>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <lcd_clear>:

void lcd_clear (void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000c18:	2080      	movs	r0, #128	; 0x80
 8000c1a:	f7ff ff89 	bl	8000b30 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	e005      	b.n	8000c30 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000c24:	2020      	movs	r0, #32
 8000c26:	f7ff ffb3 	bl	8000b90 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b45      	cmp	r3, #69	; 0x45
 8000c34:	ddf6      	ble.n	8000c24 <lcd_clear+0x12>
	}
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
    switch (row)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <lcd_put_cur+0x18>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d005      	beq.n	8000c62 <lcd_put_cur+0x22>
 8000c56:	e009      	b.n	8000c6c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5e:	603b      	str	r3, [r7, #0]
            break;
 8000c60:	e004      	b.n	8000c6c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c68:	603b      	str	r3, [r7, #0]
            break;
 8000c6a:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5d 	bl	8000b30 <lcd_send_cmd>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <lcd_init>:


void lcd_init (void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000c82:	2032      	movs	r0, #50	; 0x32
 8000c84:	f000 fe66 	bl	8001954 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c88:	2030      	movs	r0, #48	; 0x30
 8000c8a:	f7ff ff51 	bl	8000b30 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000c8e:	2005      	movs	r0, #5
 8000c90:	f000 fe60 	bl	8001954 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c94:	2030      	movs	r0, #48	; 0x30
 8000c96:	f7ff ff4b 	bl	8000b30 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fe5a 	bl	8001954 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ca0:	2030      	movs	r0, #48	; 0x30
 8000ca2:	f7ff ff45 	bl	8000b30 <lcd_send_cmd>
	HAL_Delay(10);
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f000 fe54 	bl	8001954 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000cac:	2020      	movs	r0, #32
 8000cae:	f7ff ff3f 	bl	8000b30 <lcd_send_cmd>
	HAL_Delay(10);
 8000cb2:	200a      	movs	r0, #10
 8000cb4:	f000 fe4e 	bl	8001954 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000cb8:	2028      	movs	r0, #40	; 0x28
 8000cba:	f7ff ff39 	bl	8000b30 <lcd_send_cmd>
	HAL_Delay(1);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f000 fe48 	bl	8001954 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000cc4:	2008      	movs	r0, #8
 8000cc6:	f7ff ff33 	bl	8000b30 <lcd_send_cmd>
	HAL_Delay(1);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f000 fe42 	bl	8001954 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff ff2d 	bl	8000b30 <lcd_send_cmd>
	HAL_Delay(1);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f000 fe3c 	bl	8001954 <HAL_Delay>
	HAL_Delay(1);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f000 fe39 	bl	8001954 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000ce2:	2006      	movs	r0, #6
 8000ce4:	f7ff ff24 	bl	8000b30 <lcd_send_cmd>
	HAL_Delay(1);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 fe33 	bl	8001954 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000cee:	200c      	movs	r0, #12
 8000cf0:	f7ff ff1e 	bl	8000b30 <lcd_send_cmd>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d00:	e006      	b.n	8000d10 <lcd_send_string+0x18>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff40 	bl	8000b90 <lcd_send_data>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1f4      	bne.n	8000d02 <lcd_send_string+0xa>
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d28:	f000 fd98 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2c:	f000 f832 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d30:	f000 f9d4 	bl	80010dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d34:	f000 f9b4 	bl	80010a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d38:	f000 f982 	bl	8001040 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d3c:	f000 f932 	bl	8000fa4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000d40:	f000 f8f0 	bl	8000f24 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000d44:	f000 f878 	bl	8000e38 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d48:	4810      	ldr	r0, [pc, #64]	; (8000d8c <main+0x68>)
 8000d4a:	f004 fe0d 	bl	8005968 <HAL_TIM_Base_Start_IT>
  lcd_init();
 8000d4e:	f7ff ff96 	bl	8000c7e <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ESTADO_SIGUIENTE == ESTADO_INICIAL)
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <main+0x6c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d104      	bne.n	8000d64 <main+0x40>
	  	{
	  		ESTADO_SIGUIENTE = Func_ESTADO_INICIAL();
 8000d5a:	f000 fa25 	bl	80011a8 <Func_ESTADO_INICIAL>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <main+0x6c>)
 8000d62:	6013      	str	r3, [r2, #0]
	  	}
	  	if(ESTADO_SIGUIENTE == ESTADO_INTERMEDIO)
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <main+0x6c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d104      	bne.n	8000d76 <main+0x52>
	  	{
	  		ESTADO_SIGUIENTE = Func_ESTADO_INTERMEDIO();
 8000d6c:	f000 fa3e 	bl	80011ec <Func_ESTADO_INTERMEDIO>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <main+0x6c>)
 8000d74:	6013      	str	r3, [r2, #0]
	  	}
	  	if(ESTADO_SIGUIENTE == ESTADO_MEDIDOR)
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <main+0x6c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1e9      	bne.n	8000d52 <main+0x2e>
	  	{
	  		ESTADO_SIGUIENTE = Func_ESTADO_MEDIDOR();
 8000d7e:	f000 fa63 	bl	8001248 <Func_ESTADO_MEDIDOR>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a02      	ldr	r2, [pc, #8]	; (8000d90 <main+0x6c>)
 8000d86:	6013      	str	r3, [r2, #0]
	  if(ESTADO_SIGUIENTE == ESTADO_INICIAL)
 8000d88:	e7e3      	b.n	8000d52 <main+0x2e>
 8000d8a:	bf00      	nop
 8000d8c:	20000184 	.word	0x20000184
 8000d90:	20000008 	.word	0x20000008

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b096      	sub	sp, #88	; 0x58
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2244      	movs	r2, #68	; 0x44
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 fa8d 	bl	80072c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	463b      	mov	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000db6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dba:	f003 fa6b 	bl	8004294 <HAL_PWREx_ControlVoltageScaling>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000dc4:	f000 fb1e 	bl	8001404 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd2:	2310      	movs	r3, #16
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000de2:	230a      	movs	r3, #10
 8000de4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000de6:	2307      	movs	r3, #7
 8000de8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 faa2 	bl	8004340 <HAL_RCC_OscConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e02:	f000 faff 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e06:	230f      	movs	r3, #15
 8000e08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 fe6a 	bl	8004af8 <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e2a:	f000 faeb 	bl	8001404 <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3758      	adds	r7, #88	; 0x58
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
 8000e58:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000e5c:	4a2f      	ldr	r2, [pc, #188]	; (8000f1c <MX_ADC1_Init+0xe4>)
 8000e5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e66:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e72:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e8a:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e90:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eba:	4817      	ldr	r0, [pc, #92]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000ebc:	f000 ff7e 	bl	8001dbc <HAL_ADC_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ec6:	f000 fa9d 	bl	8001404 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4810      	ldr	r0, [pc, #64]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000ed6:	f001 fff1 	bl	8002ebc <HAL_ADCEx_MultiModeConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ee0:	f000 fa90 	bl	8001404 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_ADC1_Init+0xe8>)
 8000ee6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee8:	2306      	movs	r3, #6
 8000eea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000eec:	2303      	movs	r3, #3
 8000eee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef0:	237f      	movs	r3, #127	; 0x7f
 8000ef2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_ADC1_Init+0xe0>)
 8000f02:	f001 fa21 	bl	8002348 <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f0c:	f000 fa7a 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	; 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000084 	.word	0x20000084
 8000f1c:	50040000 	.word	0x50040000
 8000f20:	04300002 	.word	0x04300002

08000f24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f2a:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <MX_I2C1_Init+0x78>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f30:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <MX_I2C1_Init+0x7c>)
 8000f32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f5e:	480e      	ldr	r0, [pc, #56]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f60:	f002 fd2e 	bl	80039c0 <HAL_I2C_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f6a:	f000 fa4b 	bl	8001404 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f72:	f003 f8e9 	bl	8004148 <HAL_I2CEx_ConfigAnalogFilter>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f7c:	f000 fa42 	bl	8001404 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f80:	2100      	movs	r1, #0
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f84:	f003 f92b 	bl	80041de <HAL_I2CEx_ConfigDigitalFilter>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f8e:	f000 fa39 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000130 	.word	0x20000130
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	10909cec 	.word	0x10909cec

08000fa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_TIM2_Init+0x98>)
 8000fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_TIM2_Init+0x98>)
 8000fcc:	224f      	movs	r2, #79	; 0x4f
 8000fce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_TIM2_Init+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_TIM2_Init+0x98>)
 8000fd8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_TIM2_Init+0x98>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_TIM2_Init+0x98>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fea:	4814      	ldr	r0, [pc, #80]	; (800103c <MX_TIM2_Init+0x98>)
 8000fec:	f004 fc64 	bl	80058b8 <HAL_TIM_Base_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ff6:	f000 fa05 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_TIM2_Init+0x98>)
 8001008:	f004 fe20 	bl	8005c4c <HAL_TIM_ConfigClockSource>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001012:	f000 f9f7 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_TIM2_Init+0x98>)
 8001024:	f005 f838 	bl	8006098 <HAL_TIMEx_MasterConfigSynchronization>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800102e:	f000 f9e9 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000184 	.word	0x20000184

08001040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001046:	4a15      	ldr	r2, [pc, #84]	; (800109c <MX_USART2_UART_Init+0x5c>)
 8001048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MX_USART2_UART_Init+0x58>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001084:	f005 f8ae 	bl	80061e4 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800108e:	f000 f9b9 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001d0 	.word	0x200001d0
 800109c:	40004400 	.word	0x40004400

080010a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_DMA_Init+0x38>)
 80010a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <MX_DMA_Init+0x38>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6493      	str	r3, [r2, #72]	; 0x48
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_DMA_Init+0x38>)
 80010b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	200b      	movs	r0, #11
 80010c4:	f002 f885 	bl	80031d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010c8:	200b      	movs	r0, #11
 80010ca:	f002 f89e 	bl	800320a <HAL_NVIC_EnableIRQ>

}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <MX_GPIO_Init+0xc4>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <MX_GPIO_Init+0xc4>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <MX_GPIO_Init+0xc4>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <MX_GPIO_Init+0xc4>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <MX_GPIO_Init+0xc4>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <MX_GPIO_Init+0xc4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <MX_GPIO_Init+0xc4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <MX_GPIO_Init+0xc4>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <MX_GPIO_Init+0xc4>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <MX_GPIO_Init+0xc4>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <MX_GPIO_Init+0xc4>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_GPIO_Init+0xc4>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2120      	movs	r1, #32
 8001156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115a:	f002 fc19 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800115e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001164:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <MX_GPIO_Init+0xc8>)
 8001176:	f002 fa49 	bl	800360c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800117a:	2320      	movs	r3, #32
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f002 fa3a 	bl	800360c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000800 	.word	0x48000800

080011a8 <Func_ESTADO_INICIAL>:

/* USER CODE BEGIN 4 */
int Func_ESTADO_INICIAL(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <Func_ESTADO_INICIAL+0x34>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <Func_ESTADO_INICIAL+0x38>)
 80011b2:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_INICIAL;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <Func_ESTADO_INICIAL+0x34>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
    Estado_Medidor = MEDIDOR_OFF;
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <Func_ESTADO_INICIAL+0x3c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
    for(;;)
    {
    	if(inout.Sa == TRUE)
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <Func_ESTADO_INICIAL+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d1f8      	bne.n	80011c0 <Func_ESTADO_INICIAL+0x18>
        {
        	return ESTADO_INTERMEDIO;
 80011ce:	2302      	movs	r3, #2
        }
    }
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000004 	.word	0x20000004
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000260 	.word	0x20000260
 80011e8:	20000264 	.word	0x20000264

080011ec <Func_ESTADO_INTERMEDIO>:

int Func_ESTADO_INTERMEDIO(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <Func_ESTADO_INTERMEDIO+0x50>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a12      	ldr	r2, [pc, #72]	; (8001240 <Func_ESTADO_INTERMEDIO+0x54>)
 80011f6:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_INTERMEDIO;
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <Func_ESTADO_INTERMEDIO+0x50>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	601a      	str	r2, [r3, #0]
    for(;;)
    {
        if((inout.Sa == FALSE) && (ESTADO_ANTERIOR == ESTADO_INICIAL))
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <Func_ESTADO_INTERMEDIO+0x58>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <Func_ESTADO_INTERMEDIO+0x2c>
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <Func_ESTADO_INTERMEDIO+0x54>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <Func_ESTADO_INTERMEDIO+0x2c>
        {
        	return ESTADO_MEDIDOR;
 8001214:	2300      	movs	r3, #0
 8001216:	e00b      	b.n	8001230 <Func_ESTADO_INTERMEDIO+0x44>
        }
        if((inout.Sa == FALSE) && (ESTADO_ANTERIOR == ESTADO_MEDIDOR))
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <Func_ESTADO_INTERMEDIO+0x58>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1eb      	bne.n	80011fe <Func_ESTADO_INTERMEDIO+0x12>
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <Func_ESTADO_INTERMEDIO+0x54>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1e7      	bne.n	80011fe <Func_ESTADO_INTERMEDIO+0x12>
        {
            return ESTADO_INICIAL;
 800122e:	2301      	movs	r3, #1
        }
    }
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000004 	.word	0x20000004
 8001240:	20000000 	.word	0x20000000
 8001244:	20000264 	.word	0x20000264

08001248 <Func_ESTADO_MEDIDOR>:

int Func_ESTADO_MEDIDOR(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <Func_ESTADO_MEDIDOR+0x50>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a12      	ldr	r2, [pc, #72]	; (800129c <Func_ESTADO_MEDIDOR+0x54>)
 8001252:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_MEDIDOR;
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <Func_ESTADO_MEDIDOR+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
    Estado_Medidor = MEDIDOR_ON;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <Func_ESTADO_MEDIDOR+0x58>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
    for(;;)
    {
    	if(inout.Sa == TRUE)
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <Func_ESTADO_MEDIDOR+0x5c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <Func_ESTADO_MEDIDOR+0x2a>
        {
        	return ESTADO_INTERMEDIO;
 800126e:	2302      	movs	r3, #2
 8001270:	e010      	b.n	8001294 <Func_ESTADO_MEDIDOR+0x4c>
        }
    	lcd_clear();
 8001272:	f7ff fcce 	bl	8000c12 <lcd_clear>
		lcd_enviar("Voltaje:", 0, 2);     //Palabra Voltaje, Fila 0, Columna 2
 8001276:	2202      	movs	r2, #2
 8001278:	2100      	movs	r1, #0
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <Func_ESTADO_MEDIDOR+0x60>)
 800127c:	f7ff fcb8 	bl	8000bf0 <lcd_enviar>
		lcd_enviar(VOL_STR, 1, 2);
 8001280:	2202      	movs	r2, #2
 8001282:	2101      	movs	r1, #1
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <Func_ESTADO_MEDIDOR+0x64>)
 8001286:	f7ff fcb3 	bl	8000bf0 <lcd_enviar>
		HAL_Delay(1000);
 800128a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128e:	f000 fb61 	bl	8001954 <HAL_Delay>
    	if(inout.Sa == TRUE)
 8001292:	e7e5      	b.n	8001260 <Func_ESTADO_MEDIDOR+0x18>
    }
}
 8001294:	4618      	mov	r0, r3
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000004 	.word	0x20000004
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000260 	.word	0x20000260
 80012a4:	20000264 	.word	0x20000264
 80012a8:	08007384 	.word	0x08007384
 80012ac:	20000258 	.word	0x20000258

080012b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(PUERTO_PB_A, PIN_PB_A) == TRUE)
 80012b8:	2101      	movs	r1, #1
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f002 fb4f 	bl	8003960 <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d105      	bne.n	80012d4 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		inout.Sa = TRUE;
 80012c8:	4a47      	ldr	r2, [pc, #284]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80012ca:	7813      	ldrb	r3, [r2, #0]
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	7013      	strb	r3, [r2, #0]
 80012d2:	e004      	b.n	80012de <HAL_TIM_PeriodElapsedCallback+0x2e>
	}
	else
	{
		inout.Sa = FALSE;
 80012d4:	4a44      	ldr	r2, [pc, #272]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80012d6:	7813      	ldrb	r3, [r2, #0]
 80012d8:	f36f 0300 	bfc	r3, #0, #1
 80012dc:	7013      	strb	r3, [r2, #0]
	static unsigned cont_VOL = 0;
	static float Media = 0.0;
	static float VOLTAJE = 0.00;
	static uint32_t MED_ADC = 0;      //Medir ADC

	if (Estado_Medidor == MEDIDOR_ON)
 80012de:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d171      	bne.n	80013ca <HAL_TIM_PeriodElapsedCallback+0x11a>
	{
		HAL_ADC_Start_IT(&hadc1);
 80012e6:	4842      	ldr	r0, [pc, #264]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80012e8:	f000 feb8 	bl	800205c <HAL_ADC_Start_IT>
		MED_ADC = HAL_ADC_GetValue(&hadc1);
 80012ec:	4840      	ldr	r0, [pc, #256]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80012ee:	f001 f81e 	bl	800232e <HAL_ADC_GetValue>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a3f      	ldr	r2, [pc, #252]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80012f6:	6013      	str	r3, [r2, #0]
		if (cont_VOL >= MUESTRA)
 80012f8:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b13      	cmp	r3, #19
 80012fe:	d942      	bls.n	8001386 <HAL_TIM_PeriodElapsedCallback+0xd6>
		{
			Media = Media/cont_VOL;
 8001300:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001302:	edd3 6a00 	vldr	s13, [r3]
 8001306:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001316:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001318:	edc3 7a00 	vstr	s15, [r3]
			Media = sqrtf(Media) * 0.0005;
 800131c:	4b37      	ldr	r3, [pc, #220]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	f005 ffff 	bl	8007328 <sqrtf>
 800132a:	ee10 3a10 	vmov	r3, s0
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f9d8 	bl	80006e4 <__aeabi_f2d>
 8001334:	a328      	add	r3, pc, #160	; (adr r3, 80013d8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7fe ff45 	bl	80001c8 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fa25 	bl	8000794 <__aeabi_d2f>
 800134a:	4603      	mov	r3, r0
 800134c:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800134e:	6013      	str	r3, [r2, #0]
			VOLTAJE = Media * CAL;
 8001350:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f9c5 	bl	80006e4 <__aeabi_f2d>
 800135a:	a321      	add	r3, pc, #132	; (adr r3, 80013e0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7fe ff32 	bl	80001c8 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fa12 	bl	8000794 <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
 8001372:	4a23      	ldr	r2, [pc, #140]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001374:	6013      	str	r3, [r2, #0]
			cont_VOL = 0;
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
			Media = 0;
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e01d      	b.n	80013c2 <HAL_TIM_PeriodElapsedCallback+0x112>
		}
		else
		{
			MED_ADC = MED_ADC * MED_ADC;
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1a      	ldr	r2, [pc, #104]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001394:	6013      	str	r3, [r2, #0]
			Media += MED_ADC;
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80013ae:	edc3 7a00 	vstr	s15, [r3]
			cont_VOL++;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80013ba:	6013      	str	r3, [r2, #0]
			MED_ADC = 0;
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
		}
		HAL_ADC_Stop_IT(&hadc1);
 80013c2:	480b      	ldr	r0, [pc, #44]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013c4:	f000 ff78 	bl	80022b8 <HAL_ADC_Stop_IT>
		}
	else
	{
		HAL_ADC_Stop_IT(&hadc1);
	}
}
 80013c8:	e002      	b.n	80013d0 <HAL_TIM_PeriodElapsedCallback+0x120>
		HAL_ADC_Stop_IT(&hadc1);
 80013ca:	4809      	ldr	r0, [pc, #36]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013cc:	f000 ff74 	bl	80022b8 <HAL_ADC_Stop_IT>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80013dc:	3f40624d 	.word	0x3f40624d
 80013e0:	b645a1cb 	.word	0xb645a1cb
 80013e4:	3ffafdf3 	.word	0x3ffafdf3
 80013e8:	20000264 	.word	0x20000264
 80013ec:	20000260 	.word	0x20000260
 80013f0:	20000084 	.word	0x20000084
 80013f4:	20000268 	.word	0x20000268
 80013f8:	2000026c 	.word	0x2000026c
 80013fc:	20000270 	.word	0x20000270
 8001400:	20000274 	.word	0x20000274

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	e7fe      	b.n	800140c <Error_Handler+0x8>
	...

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_MspInit+0x44>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141a:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <HAL_MspInit+0x44>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6613      	str	r3, [r2, #96]	; 0x60
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_MspInit+0x44>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_MspInit+0x44>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_MspInit+0x44>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6593      	str	r3, [r2, #88]	; 0x58
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_MspInit+0x44>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0ac      	sub	sp, #176	; 0xb0
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2288      	movs	r2, #136	; 0x88
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f005 ff22 	bl	80072c2 <memset>
  if(hadc->Instance==ADC1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a3c      	ldr	r2, [pc, #240]	; (8001574 <HAL_ADC_MspInit+0x11c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d171      	bne.n	800156c <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001488:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800148c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800148e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001496:	2302      	movs	r3, #2
 8001498:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800149a:	2301      	movs	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800149e:	2308      	movs	r3, #8
 80014a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014a2:	2307      	movs	r3, #7
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014aa:	2302      	movs	r3, #2
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80014ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 fd41 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80014c4:	f7ff ff9e 	bl	8001404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_ADC_MspInit+0x120>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	4a2a      	ldr	r2, [pc, #168]	; (8001578 <HAL_ADC_MspInit+0x120>)
 80014ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <HAL_ADC_MspInit+0x120>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <HAL_ADC_MspInit+0x120>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	4a24      	ldr	r2, [pc, #144]	; (8001578 <HAL_ADC_MspInit+0x120>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_ADC_MspInit+0x120>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f8:	2301      	movs	r3, #1
 80014fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014fe:	230b      	movs	r3, #11
 8001500:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800150e:	4619      	mov	r1, r3
 8001510:	481a      	ldr	r0, [pc, #104]	; (800157c <HAL_ADC_MspInit+0x124>)
 8001512:	f002 f87b 	bl	800360c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_ADC_MspInit+0x128>)
 8001518:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <HAL_ADC_MspInit+0x12c>)
 800151a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_ADC_MspInit+0x128>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_ADC_MspInit+0x128>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_ADC_MspInit+0x128>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_ADC_MspInit+0x128>)
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_ADC_MspInit+0x128>)
 8001536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_ADC_MspInit+0x128>)
 800153e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001542:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_ADC_MspInit+0x128>)
 8001546:	2220      	movs	r2, #32
 8001548:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_ADC_MspInit+0x128>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <HAL_ADC_MspInit+0x128>)
 8001552:	f001 fe75 	bl	8003240 <HAL_DMA_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 800155c:	f7ff ff52 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_ADC_MspInit+0x128>)
 8001564:	64da      	str	r2, [r3, #76]	; 0x4c
 8001566:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_ADC_MspInit+0x128>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800156c:	bf00      	nop
 800156e:	37b0      	adds	r7, #176	; 0xb0
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	50040000 	.word	0x50040000
 8001578:	40021000 	.word	0x40021000
 800157c:	48000800 	.word	0x48000800
 8001580:	200000e8 	.word	0x200000e8
 8001584:	40020008 	.word	0x40020008

08001588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0ac      	sub	sp, #176	; 0xb0
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2288      	movs	r2, #136	; 0x88
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f005 fe8a 	bl	80072c2 <memset>
  if(hi2c->Instance==I2C1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a21      	ldr	r2, [pc, #132]	; (8001638 <HAL_I2C_MspInit+0xb0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d13b      	bne.n	8001630 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015b8:	2340      	movs	r3, #64	; 0x40
 80015ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015bc:	2300      	movs	r3, #0
 80015be:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 fcbb 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015d0:	f7ff ff18 	bl	8001404 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_I2C_MspInit+0xb4>)
 80015d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d8:	4a18      	ldr	r2, [pc, #96]	; (800163c <HAL_I2C_MspInit+0xb4>)
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_I2C_MspInit+0xb4>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f4:	2312      	movs	r3, #18
 80015f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001606:	2304      	movs	r3, #4
 8001608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001610:	4619      	mov	r1, r3
 8001612:	480b      	ldr	r0, [pc, #44]	; (8001640 <HAL_I2C_MspInit+0xb8>)
 8001614:	f001 fffa 	bl	800360c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_I2C_MspInit+0xb4>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_I2C_MspInit+0xb4>)
 800161e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001622:	6593      	str	r3, [r2, #88]	; 0x58
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_I2C_MspInit+0xb4>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	37b0      	adds	r7, #176	; 0xb0
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40005400 	.word	0x40005400
 800163c:	40021000 	.word	0x40021000
 8001640:	48000400 	.word	0x48000400

08001644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001654:	d113      	bne.n	800167e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_TIM_Base_MspInit+0x44>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_TIM_Base_MspInit+0x44>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6593      	str	r3, [r2, #88]	; 0x58
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_TIM_Base_MspInit+0x44>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	201c      	movs	r0, #28
 8001674:	f001 fdad 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001678:	201c      	movs	r0, #28
 800167a:	f001 fdc6 	bl	800320a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b0ac      	sub	sp, #176	; 0xb0
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2288      	movs	r2, #136	; 0x88
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f005 fe08 	bl	80072c2 <memset>
  if(huart->Instance==USART2)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a25      	ldr	r2, [pc, #148]	; (800174c <HAL_UART_MspInit+0xc0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d143      	bne.n	8001744 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016bc:	2302      	movs	r3, #2
 80016be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fc39 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016d4:	f7ff fe96 	bl	8001404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_UART_MspInit+0xc4>)
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <HAL_UART_MspInit+0xc4>)
 80016de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e2:	6593      	str	r3, [r2, #88]	; 0x58
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_UART_MspInit+0xc4>)
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_UART_MspInit+0xc4>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_UART_MspInit+0xc4>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_UART_MspInit+0xc4>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001708:	230c      	movs	r3, #12
 800170a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001720:	2307      	movs	r3, #7
 8001722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800172a:	4619      	mov	r1, r3
 800172c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001730:	f001 ff6c 	bl	800360c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	2026      	movs	r0, #38	; 0x26
 800173a:	f001 fd4a 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800173e:	2026      	movs	r0, #38	; 0x26
 8001740:	f001 fd63 	bl	800320a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001744:	bf00      	nop
 8001746:	37b0      	adds	r7, #176	; 0xb0
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40004400 	.word	0x40004400
 8001750:	40021000 	.word	0x40021000

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <UsageFault_Handler+0x4>

08001772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a0:	f000 f8b8 	bl	8001914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <DMA1_Channel1_IRQHandler+0x10>)
 80017ae:	f001 fe7e 	bl	80034ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200000e8 	.word	0x200000e8

080017bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM2_IRQHandler+0x10>)
 80017c2:	f004 f941 	bl	8005a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000184 	.word	0x20000184

080017d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <USART2_IRQHandler+0x10>)
 80017d6:	f004 fd53 	bl	8006280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200001d0 	.word	0x200001d0

080017e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001840 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800180c:	f7ff ffea 	bl	80017e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <LoopForever+0x6>)
  ldr r1, =_edata
 8001812:	490d      	ldr	r1, [pc, #52]	; (8001848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <LoopForever+0xe>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001828:	4c0a      	ldr	r4, [pc, #40]	; (8001854 <LoopForever+0x16>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001836:	f005 fd53 	bl	80072e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800183a:	f7ff fa73 	bl	8000d24 <main>

0800183e <LoopForever>:

LoopForever:
    b LoopForever
 800183e:	e7fe      	b.n	800183e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001840:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800184c:	080073e8 	.word	0x080073e8
  ldr r2, =_sbss
 8001850:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001854:	200003b4 	.word	0x200003b4

08001858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_2_IRQHandler>
	...

0800185c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_Init+0x3c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_Init+0x3c>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001870:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001872:	2003      	movs	r0, #3
 8001874:	f001 fca2 	bl	80031bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001878:	2000      	movs	r0, #0
 800187a:	f000 f80f 	bl	800189c <HAL_InitTick>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	e001      	b.n	800188e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800188a:	f7ff fdc1 	bl	8001410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800188e:	79fb      	ldrb	r3, [r7, #7]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40022000 	.word	0x40022000

0800189c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_InitTick+0x6c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d023      	beq.n	80018f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_InitTick+0x70>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_InitTick+0x6c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 fcad 	bl	8003226 <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10f      	bne.n	80018f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	d809      	bhi.n	80018ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d8:	2200      	movs	r2, #0
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f001 fc77 	bl	80031d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_InitTick+0x74>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e007      	b.n	80018fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	e004      	b.n	80018fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e001      	b.n	80018fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000014 	.word	0x20000014
 800190c:	2000000c 	.word	0x2000000c
 8001910:	20000010 	.word	0x20000010

08001914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x20>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x24>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <HAL_IncTick+0x24>)
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000014 	.word	0x20000014
 8001938:	20000278 	.word	0x20000278

0800193c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return uwTick;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_GetTick+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000278 	.word	0x20000278

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff ffee 	bl	800193c <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d005      	beq.n	800197a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_Delay+0x44>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800197a:	bf00      	nop
 800197c:	f7ff ffde 	bl	800193c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8f7      	bhi.n	800197c <HAL_Delay+0x28>
  {
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000014 	.word	0x20000014

0800199c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3360      	adds	r3, #96	; 0x60
 8001a16:	461a      	mov	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <LL_ADC_SetOffset+0x44>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	4313      	orrs	r3, r2
 8001a34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a3c:	bf00      	nop
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	03fff000 	.word	0x03fff000

08001a4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3360      	adds	r3, #96	; 0x60
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3360      	adds	r3, #96	; 0x60
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3330      	adds	r3, #48	; 0x30
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	4413      	add	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	211f      	movs	r1, #31
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	f003 011f 	and.w	r1, r3, #31
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	431a      	orrs	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001afa:	bf00      	nop
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b087      	sub	sp, #28
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3314      	adds	r3, #20
 8001b16:	461a      	mov	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	0e5b      	lsrs	r3, r3, #25
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	4413      	add	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	0d1b      	lsrs	r3, r3, #20
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	2107      	movs	r1, #7
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	0d1b      	lsrs	r3, r3, #20
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b50:	bf00      	nop
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b74:	43db      	mvns	r3, r3
 8001b76:	401a      	ands	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0318 	and.w	r3, r3, #24
 8001b7e:	4908      	ldr	r1, [pc, #32]	; (8001ba0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b80:	40d9      	lsrs	r1, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	400b      	ands	r3, r1
 8001b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	0007ffff 	.word	0x0007ffff

08001ba4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 031f 	and.w	r3, r3, #31
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6093      	str	r3, [r2, #8]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bf8:	d101      	bne.n	8001bfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c48:	d101      	bne.n	8001c4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c98:	f043 0202 	orr.w	r2, r3, #2
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <LL_ADC_IsEnabled+0x18>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <LL_ADC_IsEnabled+0x1a>
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d101      	bne.n	8001cea <LL_ADC_IsDisableOngoing+0x18>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <LL_ADC_IsDisableOngoing+0x1a>
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d0c:	f043 0204 	orr.w	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d34:	f043 0210 	orr.w	r2, r3, #16
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d82:	f043 0220 	orr.w	r2, r3, #32
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d101      	bne.n	8001dae <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e130      	b.n	8002038 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fb37 	bl	8001458 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fef1 	bl	8001be4 <LL_ADC_IsDeepPowerDownEnabled>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fed7 	bl	8001bc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff0c 	bl	8001c34 <LL_ADC_IsInternalRegulatorEnabled>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d115      	bne.n	8001e4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fef0 	bl	8001c0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e2c:	4b84      	ldr	r3, [pc, #528]	; (8002040 <HAL_ADC_Init+0x284>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	4a84      	ldr	r2, [pc, #528]	; (8002044 <HAL_ADC_Init+0x288>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e40:	e002      	b.n	8001e48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f9      	bne.n	8001e42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff feee 	bl	8001c34 <LL_ADC_IsInternalRegulatorEnabled>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	f043 0210 	orr.w	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff62 	bl	8001d48 <LL_ADC_REG_IsConversionOngoing>
 8001e84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 80c9 	bne.w	8002026 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 80c5 	bne.w	8002026 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ea4:	f043 0202 	orr.w	r2, r3, #2
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fefb 	bl	8001cac <LL_ADC_IsEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d115      	bne.n	8001ee8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ebc:	4862      	ldr	r0, [pc, #392]	; (8002048 <HAL_ADC_Init+0x28c>)
 8001ebe:	f7ff fef5 	bl	8001cac <LL_ADC_IsEnabled>
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	4861      	ldr	r0, [pc, #388]	; (800204c <HAL_ADC_Init+0x290>)
 8001ec6:	f7ff fef1 	bl	8001cac <LL_ADC_IsEnabled>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	431c      	orrs	r4, r3
 8001ece:	4860      	ldr	r0, [pc, #384]	; (8002050 <HAL_ADC_Init+0x294>)
 8001ed0:	f7ff feec 	bl	8001cac <LL_ADC_IsEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4323      	orrs	r3, r4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	485c      	ldr	r0, [pc, #368]	; (8002054 <HAL_ADC_Init+0x298>)
 8001ee4:	f7ff fd5a 	bl	800199c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7e5b      	ldrb	r3, [r3, #25]
 8001eec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ef8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001efe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f06:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d106      	bne.n	8001f24 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	045b      	lsls	r3, r3, #17
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	4b44      	ldr	r3, [pc, #272]	; (8002058 <HAL_ADC_Init+0x29c>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	69b9      	ldr	r1, [r7, #24]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff1c 	bl	8001d96 <LL_ADC_INJ_IsConversionOngoing>
 8001f5e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d13d      	bne.n	8001fe2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d13a      	bne.n	8001fe2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f70:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f78:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f88:	f023 0302 	bic.w	r3, r3, #2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	69b9      	ldr	r1, [r7, #24]
 8001f92:	430b      	orrs	r3, r1
 8001f94:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d118      	bne.n	8001fd2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001faa:	f023 0304 	bic.w	r3, r3, #4
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fbc:	4311      	orrs	r1, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	e007      	b.n	8001fe2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0201 	bic.w	r2, r2, #1
 8001fe0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10c      	bne.n	8002004 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	f023 010f 	bic.w	r1, r3, #15
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	1e5a      	subs	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
 8002002:	e007      	b.n	8002014 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 020f 	bic.w	r2, r2, #15
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f023 0303 	bic.w	r3, r3, #3
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
 8002024:	e007      	b.n	8002036 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002036:	7ffb      	ldrb	r3, [r7, #31]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3724      	adds	r7, #36	; 0x24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd90      	pop	{r4, r7, pc}
 8002040:	2000000c 	.word	0x2000000c
 8002044:	053e2d63 	.word	0x053e2d63
 8002048:	50040000 	.word	0x50040000
 800204c:	50040100 	.word	0x50040100
 8002050:	50040200 	.word	0x50040200
 8002054:	50040300 	.word	0x50040300
 8002058:	fff0c007 	.word	0xfff0c007

0800205c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002064:	4891      	ldr	r0, [pc, #580]	; (80022ac <HAL_ADC_Start_IT+0x250>)
 8002066:	f7ff fd9d 	bl	8001ba4 <LL_ADC_GetMultimode>
 800206a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fe69 	bl	8001d48 <LL_ADC_REG_IsConversionOngoing>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	f040 8110 	bne.w	800229e <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_ADC_Start_IT+0x30>
 8002088:	2302      	movs	r3, #2
 800208a:	e10b      	b.n	80022a4 <HAL_ADC_Start_IT+0x248>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fe05 	bl	8002ca4 <ADC_Enable>
 800209a:	4603      	mov	r3, r0
 800209c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800209e:	7dfb      	ldrb	r3, [r7, #23]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f040 80f7 	bne.w	8002294 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a7c      	ldr	r2, [pc, #496]	; (80022b0 <HAL_ADC_Start_IT+0x254>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d002      	beq.n	80020ca <HAL_ADC_Start_IT+0x6e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	e000      	b.n	80020cc <HAL_ADC_Start_IT+0x70>
 80020ca:	4b7a      	ldr	r3, [pc, #488]	; (80022b4 <HAL_ADC_Start_IT+0x258>)
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d002      	beq.n	80020da <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f6:	f023 0206 	bic.w	r2, r3, #6
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	659a      	str	r2, [r3, #88]	; 0x58
 80020fe:	e002      	b.n	8002106 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	221c      	movs	r2, #28
 800210c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 021c 	bic.w	r2, r2, #28
 8002124:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	2b08      	cmp	r3, #8
 800212c:	d108      	bne.n	8002140 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0208 	orr.w	r2, r2, #8
 800213c:	605a      	str	r2, [r3, #4]
          break;
 800213e:	e008      	b.n	8002152 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0204 	orr.w	r2, r2, #4
 800214e:	605a      	str	r2, [r3, #4]
          break;
 8002150:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002156:	2b00      	cmp	r3, #0
 8002158:	d107      	bne.n	800216a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0210 	orr.w	r2, r2, #16
 8002168:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a50      	ldr	r2, [pc, #320]	; (80022b0 <HAL_ADC_Start_IT+0x254>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d002      	beq.n	800217a <HAL_ADC_Start_IT+0x11e>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	e000      	b.n	800217c <HAL_ADC_Start_IT+0x120>
 800217a:	4b4e      	ldr	r3, [pc, #312]	; (80022b4 <HAL_ADC_Start_IT+0x258>)
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	4293      	cmp	r3, r2
 8002182:	d008      	beq.n	8002196 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b05      	cmp	r3, #5
 800218e:	d002      	beq.n	8002196 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	2b09      	cmp	r3, #9
 8002194:	d13a      	bne.n	800220c <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d02d      	beq.n	8002200 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d110      	bne.n	80021de <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0220 	bic.w	r2, r2, #32
 80021ca:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021da:	605a      	str	r2, [r3, #4]
              break;
 80021dc:	e010      	b.n	8002200 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ec:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0220 	orr.w	r2, r2, #32
 80021fc:	605a      	str	r2, [r3, #4]
              break;
 80021fe:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fd77 	bl	8001cf8 <LL_ADC_REG_StartConversion>
 800220a:	e04a      	b.n	80022a2 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <HAL_ADC_Start_IT+0x254>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d002      	beq.n	8002228 <HAL_ADC_Start_IT+0x1cc>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	e000      	b.n	800222a <HAL_ADC_Start_IT+0x1ce>
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <HAL_ADC_Start_IT+0x258>)
 800222a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d034      	beq.n	80022a2 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002240:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	2b08      	cmp	r3, #8
 800224e:	d110      	bne.n	8002272 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0220 	bic.w	r2, r2, #32
 800225e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800226e:	605a      	str	r2, [r3, #4]
              break;
 8002270:	e017      	b.n	80022a2 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002280:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0220 	orr.w	r2, r2, #32
 8002290:	605a      	str	r2, [r3, #4]
              break;
 8002292:	e006      	b.n	80022a2 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800229c:	e001      	b.n	80022a2 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	50040300 	.word	0x50040300
 80022b0:	50040100 	.word	0x50040100
 80022b4:	50040000 	.word	0x50040000

080022b8 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Stop_IT+0x16>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e02b      	b.n	8002326 <HAL_ADC_Stop_IT+0x6e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80022d6:	2103      	movs	r1, #3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fc27 	bl	8002b2c <ADC_ConversionStop>
 80022de:	4603      	mov	r3, r0
 80022e0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d119      	bne.n	800231c <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 021c 	bic.w	r2, r2, #28
 80022f6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fd59 	bl	8002db0 <ADC_Disable>
 80022fe:	4603      	mov	r3, r0
 8002300:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002324:	7bfb      	ldrb	r3, [r7, #15]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0b6      	sub	sp, #216	; 0xd8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x22>
 8002366:	2302      	movs	r3, #2
 8002368:	e3c9      	b.n	8002afe <HAL_ADC_ConfigChannel+0x7b6>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fce6 	bl	8001d48 <LL_ADC_REG_IsConversionOngoing>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 83aa 	bne.w	8002ad8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d824      	bhi.n	80023de <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	3b02      	subs	r3, #2
 800239a:	2b03      	cmp	r3, #3
 800239c:	d81b      	bhi.n	80023d6 <HAL_ADC_ConfigChannel+0x8e>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <HAL_ADC_ConfigChannel+0x5c>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023bd 	.word	0x080023bd
 80023ac:	080023c5 	.word	0x080023c5
 80023b0:	080023cd 	.word	0x080023cd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80023b4:	230c      	movs	r3, #12
 80023b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80023ba:	e010      	b.n	80023de <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80023bc:	2312      	movs	r3, #18
 80023be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80023c2:	e00c      	b.n	80023de <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80023c4:	2318      	movs	r3, #24
 80023c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80023ca:	e008      	b.n	80023de <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80023cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80023d4:	e003      	b.n	80023de <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80023d6:	2306      	movs	r3, #6
 80023d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80023dc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80023ec:	f7ff fb5f 	bl	8001aae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fca7 	bl	8001d48 <LL_ADC_REG_IsConversionOngoing>
 80023fa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fcc7 	bl	8001d96 <LL_ADC_INJ_IsConversionOngoing>
 8002408:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800240c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 81a4 	bne.w	800275e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 819f 	bne.w	800275e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6819      	ldr	r1, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	461a      	mov	r2, r3
 800242e:	f7ff fb6a 	bl	8001b06 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	08db      	lsrs	r3, r3, #3
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d00a      	beq.n	800246a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6919      	ldr	r1, [r3, #16]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002464:	f7ff face 	bl	8001a04 <LL_ADC_SetOffset>
 8002468:	e179      	b.n	800275e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff faeb 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x14e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fae0 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	0e9b      	lsrs	r3, r3, #26
 8002490:	f003 021f 	and.w	r2, r3, #31
 8002494:	e01e      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x18c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fad5 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80024c4:	2320      	movs	r3, #32
 80024c6:	e004      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80024c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x1a4>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	e018      	b.n	800251e <HAL_ADC_ConfigChannel+0x1d6>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002500:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002508:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e004      	b.n	800251e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800251e:	429a      	cmp	r2, r3
 8002520:	d106      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff faa4 	bl	8001a78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fa88 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800253c:	4603      	mov	r3, r0
 800253e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <HAL_ADC_ConfigChannel+0x214>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2101      	movs	r1, #1
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fa7d 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	f003 021f 	and.w	r2, r3, #31
 800255a:	e01e      	b.n	800259a <HAL_ADC_ConfigChannel+0x252>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fa72 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002568:	4603      	mov	r3, r0
 800256a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800257a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800257e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800258a:	2320      	movs	r3, #32
 800258c:	e004      	b.n	8002598 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800258e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x26a>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	0e9b      	lsrs	r3, r3, #26
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	e018      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x29c>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80025c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80025ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80025d6:	2320      	movs	r3, #32
 80025d8:	e004      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80025da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d106      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fa41 	bl	8001a78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2102      	movs	r1, #2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fa25 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002602:	4603      	mov	r3, r0
 8002604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x2da>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fa1a 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002618:	4603      	mov	r3, r0
 800261a:	0e9b      	lsrs	r3, r3, #26
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	e01e      	b.n	8002660 <HAL_ADC_ConfigChannel+0x318>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2102      	movs	r1, #2
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fa0f 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800262e:	4603      	mov	r3, r0
 8002630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002644:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e004      	b.n	800265e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002658:	fab3 f383 	clz	r3, r3
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x330>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	e014      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x35a>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800268c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002694:	2320      	movs	r3, #32
 8002696:	e004      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d106      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2200      	movs	r2, #0
 80026ac:	2102      	movs	r1, #2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f9e2 	bl	8001a78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2103      	movs	r1, #3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f9c6 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x398>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2103      	movs	r1, #3
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f9bb 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	f003 021f 	and.w	r2, r3, #31
 80026de:	e017      	b.n	8002710 <HAL_ADC_ConfigChannel+0x3c8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2103      	movs	r1, #3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f9b0 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80026fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002702:	2320      	movs	r3, #32
 8002704:	e003      	b.n	800270e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x3e0>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	e011      	b.n	800274c <HAL_ADC_ConfigChannel+0x404>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002738:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800273a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002740:	2320      	movs	r3, #32
 8002742:	e003      	b.n	800274c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800274c:	429a      	cmp	r2, r3
 800274e:	d106      	bne.n	800275e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2200      	movs	r2, #0
 8002756:	2103      	movs	r1, #3
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff f98d 	bl	8001a78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff faa2 	bl	8001cac <LL_ADC_IsEnabled>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	f040 8140 	bne.w	80029f0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	6819      	ldr	r1, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	461a      	mov	r2, r3
 800277e:	f7ff f9ed 	bl	8001b5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	4a8f      	ldr	r2, [pc, #572]	; (80029c4 <HAL_ADC_ConfigChannel+0x67c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	f040 8131 	bne.w	80029f0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10b      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x46e>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0e9b      	lsrs	r3, r3, #26
 80027a4:	3301      	adds	r3, #1
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	2b09      	cmp	r3, #9
 80027ac:	bf94      	ite	ls
 80027ae:	2301      	movls	r3, #1
 80027b0:	2300      	movhi	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	e019      	b.n	80027ea <HAL_ADC_ConfigChannel+0x4a2>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80027c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80027c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e003      	b.n	80027da <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80027d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	2b09      	cmp	r3, #9
 80027e2:	bf94      	ite	ls
 80027e4:	2301      	movls	r3, #1
 80027e6:	2300      	movhi	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d079      	beq.n	80028e2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d107      	bne.n	800280a <HAL_ADC_ConfigChannel+0x4c2>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	0e9b      	lsrs	r3, r3, #26
 8002800:	3301      	adds	r3, #1
 8002802:	069b      	lsls	r3, r3, #26
 8002804:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002808:	e015      	b.n	8002836 <HAL_ADC_ConfigChannel+0x4ee>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800281a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800281c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002822:	2320      	movs	r3, #32
 8002824:	e003      	b.n	800282e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
 800282e:	3301      	adds	r3, #1
 8002830:	069b      	lsls	r3, r3, #26
 8002832:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x50e>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	0e9b      	lsrs	r3, r3, #26
 8002848:	3301      	adds	r3, #1
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2101      	movs	r1, #1
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	e017      	b.n	8002886 <HAL_ADC_ConfigChannel+0x53e>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800286e:	2320      	movs	r3, #32
 8002870:	e003      	b.n	800287a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	ea42 0103 	orr.w	r1, r2, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10a      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x564>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	0e9b      	lsrs	r3, r3, #26
 800289c:	3301      	adds	r3, #1
 800289e:	f003 021f 	and.w	r2, r3, #31
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	051b      	lsls	r3, r3, #20
 80028aa:	e018      	b.n	80028de <HAL_ADC_ConfigChannel+0x596>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028bc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e003      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f003 021f 	and.w	r2, r3, #31
 80028d6:	4613      	mov	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4413      	add	r3, r2
 80028dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028de:	430b      	orrs	r3, r1
 80028e0:	e081      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x5b6>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	0e9b      	lsrs	r3, r3, #26
 80028f4:	3301      	adds	r3, #1
 80028f6:	069b      	lsls	r3, r3, #26
 80028f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028fc:	e015      	b.n	800292a <HAL_ADC_ConfigChannel+0x5e2>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e003      	b.n	8002922 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	3301      	adds	r3, #1
 8002924:	069b      	lsls	r3, r3, #26
 8002926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_ADC_ConfigChannel+0x602>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	3301      	adds	r3, #1
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	2101      	movs	r1, #1
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	e017      	b.n	800297a <HAL_ADC_ConfigChannel+0x632>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	61bb      	str	r3, [r7, #24]
  return result;
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e003      	b.n	800296e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	ea42 0103 	orr.w	r1, r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10d      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x65e>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	0e9b      	lsrs	r3, r3, #26
 8002990:	3301      	adds	r3, #1
 8002992:	f003 021f 	and.w	r2, r3, #31
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	3b1e      	subs	r3, #30
 800299e:	051b      	lsls	r3, r3, #20
 80029a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029a4:	e01e      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x69c>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	60fb      	str	r3, [r7, #12]
  return result;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80029be:	2320      	movs	r3, #32
 80029c0:	e006      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x688>
 80029c2:	bf00      	nop
 80029c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	f003 021f 	and.w	r2, r3, #31
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	3b1e      	subs	r3, #30
 80029de:	051b      	lsls	r3, r3, #20
 80029e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7ff f88b 	bl	8001b06 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b44      	ldr	r3, [pc, #272]	; (8002b08 <HAL_ADC_ConfigChannel+0x7c0>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d07a      	beq.n	8002af2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029fc:	4843      	ldr	r0, [pc, #268]	; (8002b0c <HAL_ADC_ConfigChannel+0x7c4>)
 80029fe:	f7fe fff3 	bl	80019e8 <LL_ADC_GetCommonPathInternalCh>
 8002a02:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a41      	ldr	r2, [pc, #260]	; (8002b10 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d12c      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d126      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a3c      	ldr	r2, [pc, #240]	; (8002b14 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d004      	beq.n	8002a30 <HAL_ADC_ConfigChannel+0x6e8>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3b      	ldr	r2, [pc, #236]	; (8002b18 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d15d      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4834      	ldr	r0, [pc, #208]	; (8002b0c <HAL_ADC_ConfigChannel+0x7c4>)
 8002a3c:	f7fe ffc1 	bl	80019c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a40:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <HAL_ADC_ConfigChannel+0x7d4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	4a36      	ldr	r2, [pc, #216]	; (8002b20 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a5a:	e002      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f9      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a68:	e040      	b.n	8002aec <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2d      	ldr	r2, [pc, #180]	; (8002b24 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d118      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d112      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a23      	ldr	r2, [pc, #140]	; (8002b14 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_ADC_ConfigChannel+0x74c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d12d      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	481b      	ldr	r0, [pc, #108]	; (8002b0c <HAL_ADC_ConfigChannel+0x7c4>)
 8002aa0:	f7fe ff8f 	bl	80019c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aa4:	e024      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <HAL_ADC_ConfigChannel+0x7e0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d120      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ab0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d11a      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d115      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ac6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002aca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ace:	4619      	mov	r1, r3
 8002ad0:	480e      	ldr	r0, [pc, #56]	; (8002b0c <HAL_ADC_ConfigChannel+0x7c4>)
 8002ad2:	f7fe ff76 	bl	80019c2 <LL_ADC_SetCommonPathInternalCh>
 8002ad6:	e00c      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002aea:	e002      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aec:	bf00      	nop
 8002aee:	e000      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002af0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002afa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	37d8      	adds	r7, #216	; 0xd8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	80080000 	.word	0x80080000
 8002b0c:	50040300 	.word	0x50040300
 8002b10:	c7520000 	.word	0xc7520000
 8002b14:	50040000 	.word	0x50040000
 8002b18:	50040200 	.word	0x50040200
 8002b1c:	2000000c 	.word	0x2000000c
 8002b20:	053e2d63 	.word	0x053e2d63
 8002b24:	cb840000 	.word	0xcb840000
 8002b28:	80000001 	.word	0x80000001

08002b2c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f900 	bl	8001d48 <LL_ADC_REG_IsConversionOngoing>
 8002b48:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f921 	bl	8001d96 <LL_ADC_INJ_IsConversionOngoing>
 8002b54:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d103      	bne.n	8002b64 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8098 	beq.w	8002c94 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d02a      	beq.n	8002bc8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7e5b      	ldrb	r3, [r3, #25]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d126      	bne.n	8002bc8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7e1b      	ldrb	r3, [r3, #24]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d122      	bne.n	8002bc8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b86:	e014      	b.n	8002bb2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4a45      	ldr	r2, [pc, #276]	; (8002ca0 <ADC_ConversionStop+0x174>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d90d      	bls.n	8002bac <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	f043 0210 	orr.w	r2, r3, #16
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e074      	b.n	8002c96 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	d1e3      	bne.n	8002b88 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2240      	movs	r2, #64	; 0x40
 8002bc6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d014      	beq.n	8002bf8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff f8b8 	bl	8001d48 <LL_ADC_REG_IsConversionOngoing>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff f875 	bl	8001cd2 <LL_ADC_IsDisableOngoing>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d104      	bne.n	8002bf8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff f894 	bl	8001d20 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d014      	beq.n	8002c28 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff f8c7 	bl	8001d96 <LL_ADC_INJ_IsConversionOngoing>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00c      	beq.n	8002c28 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff f85d 	bl	8001cd2 <LL_ADC_IsDisableOngoing>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff f8a3 	bl	8001d6e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d005      	beq.n	8002c3a <ADC_ConversionStop+0x10e>
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d105      	bne.n	8002c40 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002c34:	230c      	movs	r3, #12
 8002c36:	617b      	str	r3, [r7, #20]
        break;
 8002c38:	e005      	b.n	8002c46 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	617b      	str	r3, [r7, #20]
        break;
 8002c3e:	e002      	b.n	8002c46 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002c40:	2304      	movs	r3, #4
 8002c42:	617b      	str	r3, [r7, #20]
        break;
 8002c44:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002c46:	f7fe fe79 	bl	800193c <HAL_GetTick>
 8002c4a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c4c:	e01b      	b.n	8002c86 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002c4e:	f7fe fe75 	bl	800193c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b05      	cmp	r3, #5
 8002c5a:	d914      	bls.n	8002c86 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	f043 0210 	orr.w	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e007      	b.n	8002c96 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1dc      	bne.n	8002c4e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	a33fffff 	.word	0xa33fffff

08002ca4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe fff9 	bl	8001cac <LL_ADC_IsEnabled>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d169      	bne.n	8002d94 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <ADC_Enable+0xfc>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f043 0210 	orr.w	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e055      	b.n	8002d96 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe ffb4 	bl	8001c5c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cf4:	482b      	ldr	r0, [pc, #172]	; (8002da4 <ADC_Enable+0x100>)
 8002cf6:	f7fe fe77 	bl	80019e8 <LL_ADC_GetCommonPathInternalCh>
 8002cfa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d013      	beq.n	8002d2c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d04:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <ADC_Enable+0x104>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	4a28      	ldr	r2, [pc, #160]	; (8002dac <ADC_Enable+0x108>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d1e:	e002      	b.n	8002d26 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f9      	bne.n	8002d20 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d2c:	f7fe fe06 	bl	800193c <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d32:	e028      	b.n	8002d86 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe ffb7 	bl	8001cac <LL_ADC_IsEnabled>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe ff87 	bl	8001c5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d4e:	f7fe fdf5 	bl	800193c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d914      	bls.n	8002d86 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d00d      	beq.n	8002d86 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f043 0210 	orr.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e007      	b.n	8002d96 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d1cf      	bne.n	8002d34 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	8000003f 	.word	0x8000003f
 8002da4:	50040300 	.word	0x50040300
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	053e2d63 	.word	0x053e2d63

08002db0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe ff88 	bl	8001cd2 <LL_ADC_IsDisableOngoing>
 8002dc2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe ff6f 	bl	8001cac <LL_ADC_IsEnabled>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d047      	beq.n	8002e64 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d144      	bne.n	8002e64 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 030d 	and.w	r3, r3, #13
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d10c      	bne.n	8002e02 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe ff49 	bl	8001c84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2203      	movs	r2, #3
 8002df8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dfa:	f7fe fd9f 	bl	800193c <HAL_GetTick>
 8002dfe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e00:	e029      	b.n	8002e56 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	f043 0210 	orr.w	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e023      	b.n	8002e66 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e1e:	f7fe fd8d 	bl	800193c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d914      	bls.n	8002e56 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f043 0210 	orr.w	r2, r3, #16
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	f043 0201 	orr.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e007      	b.n	8002e66 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1dc      	bne.n	8002e1e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <LL_ADC_IsEnabled>:
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <LL_ADC_IsEnabled+0x18>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <LL_ADC_IsEnabled+0x1a>
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d101      	bne.n	8002eac <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b09f      	sub	sp, #124	; 0x7c
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e093      	b.n	8003002 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a47      	ldr	r2, [pc, #284]	; (800300c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d102      	bne.n	8002efa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ef4:	4b46      	ldr	r3, [pc, #280]	; (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	e001      	b.n	8002efe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e072      	b.n	8003002 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ffb8 	bl	8002e94 <LL_ADC_REG_IsConversionOngoing>
 8002f24:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ffb2 	bl	8002e94 <LL_ADC_REG_IsConversionOngoing>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d154      	bne.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d151      	bne.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f3c:	4b35      	ldr	r3, [pc, #212]	; (8003014 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f3e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d02c      	beq.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f5a:	035b      	lsls	r3, r3, #13
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f64:	4829      	ldr	r0, [pc, #164]	; (800300c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f66:	f7ff ff82 	bl	8002e6e <LL_ADC_IsEnabled>
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	4828      	ldr	r0, [pc, #160]	; (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f6e:	f7ff ff7e 	bl	8002e6e <LL_ADC_IsEnabled>
 8002f72:	4603      	mov	r3, r0
 8002f74:	431c      	orrs	r4, r3
 8002f76:	4828      	ldr	r0, [pc, #160]	; (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f78:	f7ff ff79 	bl	8002e6e <LL_ADC_IsEnabled>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4323      	orrs	r3, r4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d137      	bne.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f8c:	f023 030f 	bic.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	6811      	ldr	r1, [r2, #0]
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	6892      	ldr	r2, [r2, #8]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa0:	e028      	b.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fae:	4817      	ldr	r0, [pc, #92]	; (800300c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fb0:	f7ff ff5d 	bl	8002e6e <LL_ADC_IsEnabled>
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	4816      	ldr	r0, [pc, #88]	; (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fb8:	f7ff ff59 	bl	8002e6e <LL_ADC_IsEnabled>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	431c      	orrs	r4, r3
 8002fc0:	4815      	ldr	r0, [pc, #84]	; (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002fc2:	f7ff ff54 	bl	8002e6e <LL_ADC_IsEnabled>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4323      	orrs	r3, r4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d112      	bne.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fd6:	f023 030f 	bic.w	r3, r3, #15
 8002fda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fdc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fde:	e009      	b.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ff2:	e000      	b.n	8002ff6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ffe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003002:	4618      	mov	r0, r3
 8003004:	377c      	adds	r7, #124	; 0x7c
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}
 800300a:	bf00      	nop
 800300c:	50040000 	.word	0x50040000
 8003010:	50040100 	.word	0x50040100
 8003014:	50040300 	.word	0x50040300
 8003018:	50040200 	.word	0x50040200

0800301c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <__NVIC_SetPriorityGrouping+0x44>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003038:	4013      	ands	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800304c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304e:	4a04      	ldr	r2, [pc, #16]	; (8003060 <__NVIC_SetPriorityGrouping+0x44>)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	60d3      	str	r3, [r2, #12]
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <__NVIC_GetPriorityGrouping+0x18>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	f003 0307 	and.w	r3, r3, #7
}
 8003072:	4618      	mov	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	2b00      	cmp	r3, #0
 8003090:	db0b      	blt.n	80030aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	4907      	ldr	r1, [pc, #28]	; (80030b8 <__NVIC_EnableIRQ+0x38>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2001      	movs	r0, #1
 80030a2:	fa00 f202 	lsl.w	r2, r0, r2
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000e100 	.word	0xe000e100

080030bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	db0a      	blt.n	80030e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	490c      	ldr	r1, [pc, #48]	; (8003108 <__NVIC_SetPriority+0x4c>)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	440b      	add	r3, r1
 80030e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e4:	e00a      	b.n	80030fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4908      	ldr	r1, [pc, #32]	; (800310c <__NVIC_SetPriority+0x50>)
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	3b04      	subs	r3, #4
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	440b      	add	r3, r1
 80030fa:	761a      	strb	r2, [r3, #24]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000e100 	.word	0xe000e100
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f1c3 0307 	rsb	r3, r3, #7
 800312a:	2b04      	cmp	r3, #4
 800312c:	bf28      	it	cs
 800312e:	2304      	movcs	r3, #4
 8003130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3304      	adds	r3, #4
 8003136:	2b06      	cmp	r3, #6
 8003138:	d902      	bls.n	8003140 <NVIC_EncodePriority+0x30>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3b03      	subs	r3, #3
 800313e:	e000      	b.n	8003142 <NVIC_EncodePriority+0x32>
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003144:	f04f 32ff 	mov.w	r2, #4294967295
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43da      	mvns	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	401a      	ands	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003158:	f04f 31ff 	mov.w	r1, #4294967295
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	43d9      	mvns	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	4313      	orrs	r3, r2
         );
}
 800316a:	4618      	mov	r0, r3
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003188:	d301      	bcc.n	800318e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318a:	2301      	movs	r3, #1
 800318c:	e00f      	b.n	80031ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800318e:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <SysTick_Config+0x40>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003196:	210f      	movs	r1, #15
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	f7ff ff8e 	bl	80030bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <SysTick_Config+0x40>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a6:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <SysTick_Config+0x40>)
 80031a8:	2207      	movs	r2, #7
 80031aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	e000e010 	.word	0xe000e010

080031bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff29 	bl	800301c <__NVIC_SetPriorityGrouping>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4603      	mov	r3, r0
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031e4:	f7ff ff3e 	bl	8003064 <__NVIC_GetPriorityGrouping>
 80031e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	6978      	ldr	r0, [r7, #20]
 80031f0:	f7ff ff8e 	bl	8003110 <NVIC_EncodePriority>
 80031f4:	4602      	mov	r2, r0
 80031f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff5d 	bl	80030bc <__NVIC_SetPriority>
}
 8003202:	bf00      	nop
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff31 	bl	8003080 <__NVIC_EnableIRQ>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff ffa2 	bl	8003178 <SysTick_Config>
 8003234:	4603      	mov	r3, r0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e098      	b.n	8003384 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	4b4d      	ldr	r3, [pc, #308]	; (8003390 <HAL_DMA_Init+0x150>)
 800325a:	429a      	cmp	r2, r3
 800325c:	d80f      	bhi.n	800327e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_DMA_Init+0x154>)
 8003266:	4413      	add	r3, r2
 8003268:	4a4b      	ldr	r2, [pc, #300]	; (8003398 <HAL_DMA_Init+0x158>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	009a      	lsls	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a48      	ldr	r2, [pc, #288]	; (800339c <HAL_DMA_Init+0x15c>)
 800327a:	641a      	str	r2, [r3, #64]	; 0x40
 800327c:	e00e      	b.n	800329c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <HAL_DMA_Init+0x160>)
 8003286:	4413      	add	r3, r2
 8003288:	4a43      	ldr	r2, [pc, #268]	; (8003398 <HAL_DMA_Init+0x158>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	009a      	lsls	r2, r3, #2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a42      	ldr	r2, [pc, #264]	; (80033a4 <HAL_DMA_Init+0x164>)
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f6:	d039      	beq.n	800336c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	4a27      	ldr	r2, [pc, #156]	; (800339c <HAL_DMA_Init+0x15c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d11a      	bne.n	8003338 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003302:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <HAL_DMA_Init+0x168>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f003 031c 	and.w	r3, r3, #28
 800330e:	210f      	movs	r1, #15
 8003310:	fa01 f303 	lsl.w	r3, r1, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	4924      	ldr	r1, [pc, #144]	; (80033a8 <HAL_DMA_Init+0x168>)
 8003318:	4013      	ands	r3, r2
 800331a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800331c:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <HAL_DMA_Init+0x168>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	f003 031c 	and.w	r3, r3, #28
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	491d      	ldr	r1, [pc, #116]	; (80033a8 <HAL_DMA_Init+0x168>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
 8003336:	e019      	b.n	800336c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003338:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <HAL_DMA_Init+0x16c>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	f003 031c 	and.w	r3, r3, #28
 8003344:	210f      	movs	r1, #15
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	4917      	ldr	r1, [pc, #92]	; (80033ac <HAL_DMA_Init+0x16c>)
 800334e:	4013      	ands	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003352:	4b16      	ldr	r3, [pc, #88]	; (80033ac <HAL_DMA_Init+0x16c>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	f003 031c 	and.w	r3, r3, #28
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	4911      	ldr	r1, [pc, #68]	; (80033ac <HAL_DMA_Init+0x16c>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40020407 	.word	0x40020407
 8003394:	bffdfff8 	.word	0xbffdfff8
 8003398:	cccccccd 	.word	0xcccccccd
 800339c:	40020000 	.word	0x40020000
 80033a0:	bffdfbf8 	.word	0xbffdfbf8
 80033a4:	40020400 	.word	0x40020400
 80033a8:	400200a8 	.word	0x400200a8
 80033ac:	400204a8 	.word	0x400204a8

080033b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d008      	beq.n	80033da <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2204      	movs	r2, #4
 80033cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e022      	b.n	8003420 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 020e 	bic.w	r2, r2, #14
 80033e8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	f003 021c 	and.w	r2, r3, #28
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2101      	movs	r1, #1
 8003408:	fa01 f202 	lsl.w	r2, r1, r2
 800340c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800341e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d005      	beq.n	8003450 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2204      	movs	r2, #4
 8003448:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e029      	b.n	80034a4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 020e 	bic.w	r2, r2, #14
 800345e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	f003 021c 	and.w	r2, r3, #28
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	2101      	movs	r1, #1
 800347e:	fa01 f202 	lsl.w	r2, r1, r2
 8003482:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
    }
  }
  return status;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f003 031c 	and.w	r3, r3, #28
 80034ce:	2204      	movs	r2, #4
 80034d0:	409a      	lsls	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d026      	beq.n	8003528 <HAL_DMA_IRQHandler+0x7a>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d021      	beq.n	8003528 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d107      	bne.n	8003502 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0204 	bic.w	r2, r2, #4
 8003500:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f003 021c 	and.w	r2, r3, #28
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2104      	movs	r1, #4
 8003510:	fa01 f202 	lsl.w	r2, r1, r2
 8003514:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	2b00      	cmp	r3, #0
 800351c:	d071      	beq.n	8003602 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003526:	e06c      	b.n	8003602 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	f003 031c 	and.w	r3, r3, #28
 8003530:	2202      	movs	r2, #2
 8003532:	409a      	lsls	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d02e      	beq.n	800359a <HAL_DMA_IRQHandler+0xec>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d029      	beq.n	800359a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 020a 	bic.w	r2, r2, #10
 8003562:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	f003 021c 	and.w	r2, r3, #28
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	2102      	movs	r1, #2
 800357a:	fa01 f202 	lsl.w	r2, r1, r2
 800357e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d038      	beq.n	8003602 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003598:	e033      	b.n	8003602 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f003 031c 	and.w	r3, r3, #28
 80035a2:	2208      	movs	r2, #8
 80035a4:	409a      	lsls	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d02a      	beq.n	8003604 <HAL_DMA_IRQHandler+0x156>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d025      	beq.n	8003604 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 020e 	bic.w	r2, r2, #14
 80035c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	f003 021c 	and.w	r2, r3, #28
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	2101      	movs	r1, #1
 80035d6:	fa01 f202 	lsl.w	r2, r1, r2
 80035da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d004      	beq.n	8003604 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003602:	bf00      	nop
 8003604:	bf00      	nop
}
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800361a:	e17f      	b.n	800391c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2101      	movs	r1, #1
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8171 	beq.w	8003916 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d005      	beq.n	800364c <HAL_GPIO_Init+0x40>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d130      	bne.n	80036ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	2203      	movs	r2, #3
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003682:	2201      	movs	r2, #1
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4013      	ands	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	091b      	lsrs	r3, r3, #4
 8003698:	f003 0201 	and.w	r2, r3, #1
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d118      	bne.n	80036ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80036c0:	2201      	movs	r2, #1
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	08db      	lsrs	r3, r3, #3
 80036d6:	f003 0201 	and.w	r2, r3, #1
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d017      	beq.n	8003728 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	2203      	movs	r2, #3
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d123      	bne.n	800377c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	08da      	lsrs	r2, r3, #3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3208      	adds	r2, #8
 800373c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003740:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	220f      	movs	r2, #15
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	08da      	lsrs	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3208      	adds	r2, #8
 8003776:	6939      	ldr	r1, [r7, #16]
 8003778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0203 	and.w	r2, r3, #3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80ac 	beq.w	8003916 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037be:	4b5f      	ldr	r3, [pc, #380]	; (800393c <HAL_GPIO_Init+0x330>)
 80037c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c2:	4a5e      	ldr	r2, [pc, #376]	; (800393c <HAL_GPIO_Init+0x330>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6613      	str	r3, [r2, #96]	; 0x60
 80037ca:	4b5c      	ldr	r3, [pc, #368]	; (800393c <HAL_GPIO_Init+0x330>)
 80037cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037d6:	4a5a      	ldr	r2, [pc, #360]	; (8003940 <HAL_GPIO_Init+0x334>)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	3302      	adds	r3, #2
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	220f      	movs	r2, #15
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003800:	d025      	beq.n	800384e <HAL_GPIO_Init+0x242>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a4f      	ldr	r2, [pc, #316]	; (8003944 <HAL_GPIO_Init+0x338>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01f      	beq.n	800384a <HAL_GPIO_Init+0x23e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a4e      	ldr	r2, [pc, #312]	; (8003948 <HAL_GPIO_Init+0x33c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d019      	beq.n	8003846 <HAL_GPIO_Init+0x23a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a4d      	ldr	r2, [pc, #308]	; (800394c <HAL_GPIO_Init+0x340>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_GPIO_Init+0x236>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a4c      	ldr	r2, [pc, #304]	; (8003950 <HAL_GPIO_Init+0x344>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00d      	beq.n	800383e <HAL_GPIO_Init+0x232>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a4b      	ldr	r2, [pc, #300]	; (8003954 <HAL_GPIO_Init+0x348>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d007      	beq.n	800383a <HAL_GPIO_Init+0x22e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a4a      	ldr	r2, [pc, #296]	; (8003958 <HAL_GPIO_Init+0x34c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d101      	bne.n	8003836 <HAL_GPIO_Init+0x22a>
 8003832:	2306      	movs	r3, #6
 8003834:	e00c      	b.n	8003850 <HAL_GPIO_Init+0x244>
 8003836:	2307      	movs	r3, #7
 8003838:	e00a      	b.n	8003850 <HAL_GPIO_Init+0x244>
 800383a:	2305      	movs	r3, #5
 800383c:	e008      	b.n	8003850 <HAL_GPIO_Init+0x244>
 800383e:	2304      	movs	r3, #4
 8003840:	e006      	b.n	8003850 <HAL_GPIO_Init+0x244>
 8003842:	2303      	movs	r3, #3
 8003844:	e004      	b.n	8003850 <HAL_GPIO_Init+0x244>
 8003846:	2302      	movs	r3, #2
 8003848:	e002      	b.n	8003850 <HAL_GPIO_Init+0x244>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_GPIO_Init+0x244>
 800384e:	2300      	movs	r3, #0
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	f002 0203 	and.w	r2, r2, #3
 8003856:	0092      	lsls	r2, r2, #2
 8003858:	4093      	lsls	r3, r2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003860:	4937      	ldr	r1, [pc, #220]	; (8003940 <HAL_GPIO_Init+0x334>)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	3302      	adds	r3, #2
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800386e:	4b3b      	ldr	r3, [pc, #236]	; (800395c <HAL_GPIO_Init+0x350>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	43db      	mvns	r3, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4013      	ands	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003892:	4a32      	ldr	r2, [pc, #200]	; (800395c <HAL_GPIO_Init+0x350>)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003898:	4b30      	ldr	r3, [pc, #192]	; (800395c <HAL_GPIO_Init+0x350>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4013      	ands	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038bc:	4a27      	ldr	r2, [pc, #156]	; (800395c <HAL_GPIO_Init+0x350>)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038c2:	4b26      	ldr	r3, [pc, #152]	; (800395c <HAL_GPIO_Init+0x350>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4013      	ands	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038e6:	4a1d      	ldr	r2, [pc, #116]	; (800395c <HAL_GPIO_Init+0x350>)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038ec:	4b1b      	ldr	r3, [pc, #108]	; (800395c <HAL_GPIO_Init+0x350>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003910:	4a12      	ldr	r2, [pc, #72]	; (800395c <HAL_GPIO_Init+0x350>)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	3301      	adds	r3, #1
 800391a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	fa22 f303 	lsr.w	r3, r2, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	f47f ae78 	bne.w	800361c <HAL_GPIO_Init+0x10>
  }
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000
 8003940:	40010000 	.word	0x40010000
 8003944:	48000400 	.word	0x48000400
 8003948:	48000800 	.word	0x48000800
 800394c:	48000c00 	.word	0x48000c00
 8003950:	48001000 	.word	0x48001000
 8003954:	48001400 	.word	0x48001400
 8003958:	48001800 	.word	0x48001800
 800395c:	40010400 	.word	0x40010400

08003960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	e001      	b.n	8003982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
 800399c:	4613      	mov	r3, r2
 800399e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a0:	787b      	ldrb	r3, [r7, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039ac:	e002      	b.n	80039b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e08d      	b.n	8003aee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd fdce 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	; 0x24
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	e006      	b.n	8003a48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d108      	bne.n	8003a62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	e007      	b.n	8003a72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69d9      	ldr	r1, [r3, #28]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1a      	ldr	r2, [r3, #32]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	461a      	mov	r2, r3
 8003b04:	460b      	mov	r3, r1
 8003b06:	817b      	strh	r3, [r7, #10]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	f040 80fd 	bne.w	8003d14 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_I2C_Master_Transmit+0x30>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e0f6      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x21e>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b30:	f7fd ff04 	bl	800193c <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	2319      	movs	r3, #25
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f914 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e0e1      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	; 0x21
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2bff      	cmp	r3, #255	; 0xff
 8003b82:	d906      	bls.n	8003b92 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	22ff      	movs	r2, #255	; 0xff
 8003b88:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003b8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e007      	b.n	8003ba2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003b9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d024      	beq.n	8003bf4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	3301      	adds	r3, #1
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	8979      	ldrh	r1, [r7, #10]
 8003be6:	4b4e      	ldr	r3, [pc, #312]	; (8003d20 <HAL_I2C_Master_Transmit+0x228>)
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fa79 	bl	80040e4 <I2C_TransferConfig>
 8003bf2:	e066      	b.n	8003cc2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	8979      	ldrh	r1, [r7, #10]
 8003bfc:	4b48      	ldr	r3, [pc, #288]	; (8003d20 <HAL_I2C_Master_Transmit+0x228>)
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fa6e 	bl	80040e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c08:	e05b      	b.n	8003cc2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	6a39      	ldr	r1, [r7, #32]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f8fd 	bl	8003e0e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e07b      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d034      	beq.n	8003cc2 <HAL_I2C_Master_Transmit+0x1ca>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d130      	bne.n	8003cc2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f880 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e04d      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2bff      	cmp	r3, #255	; 0xff
 8003c82:	d90e      	bls.n	8003ca2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	22ff      	movs	r2, #255	; 0xff
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	8979      	ldrh	r1, [r7, #10]
 8003c92:	2300      	movs	r3, #0
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fa22 	bl	80040e4 <I2C_TransferConfig>
 8003ca0:	e00f      	b.n	8003cc2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	8979      	ldrh	r1, [r7, #10]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fa11 	bl	80040e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d19e      	bne.n	8003c0a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	6a39      	ldr	r1, [r7, #32]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f8e3 	bl	8003e9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e01a      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <HAL_I2C_Master_Transmit+0x22c>)
 8003cf4:	400b      	ands	r3, r1
 8003cf6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e000      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	80002000 	.word	0x80002000
 8003d24:	fe00e800 	.word	0xfe00e800

08003d28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d103      	bne.n	8003d46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d007      	beq.n	8003d64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	619a      	str	r2, [r3, #24]
  }
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d80:	e031      	b.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d02d      	beq.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8a:	f7fd fdd7 	bl	800193c <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d302      	bcc.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d122      	bne.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	4013      	ands	r3, r2
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	bf0c      	ite	eq
 8003db0:	2301      	moveq	r3, #1
 8003db2:	2300      	movne	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d113      	bne.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f043 0220 	orr.w	r2, r3, #32
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e00f      	b.n	8003e06 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d0be      	beq.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e1a:	e033      	b.n	8003e84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f87f 	bl	8003f24 <I2C_IsErrorOccurred>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e031      	b.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d025      	beq.n	8003e84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e38:	f7fd fd80 	bl	800193c <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d302      	bcc.n	8003e4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d11a      	bne.n	8003e84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d013      	beq.n	8003e84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e007      	b.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d1c4      	bne.n	8003e1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea8:	e02f      	b.n	8003f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f838 	bl	8003f24 <I2C_IsErrorOccurred>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e02d      	b.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebe:	f7fd fd3d 	bl	800193c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d302      	bcc.n	8003ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d11a      	bne.n	8003f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d013      	beq.n	8003f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	f043 0220 	orr.w	r2, r3, #32
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e007      	b.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d1c8      	bne.n	8003eaa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	; 0x28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d068      	beq.n	8004022 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2210      	movs	r2, #16
 8003f56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f58:	e049      	b.n	8003fee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d045      	beq.n	8003fee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f62:	f7fd fceb 	bl	800193c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <I2C_IsErrorOccurred+0x54>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d13a      	bne.n	8003fee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9a:	d121      	bne.n	8003fe0 <I2C_IsErrorOccurred+0xbc>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa2:	d01d      	beq.n	8003fe0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d01a      	beq.n	8003fe0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fba:	f7fd fcbf 	bl	800193c <HAL_GetTick>
 8003fbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fc0:	e00e      	b.n	8003fe0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fc2:	f7fd fcbb 	bl	800193c <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b19      	cmp	r3, #25
 8003fce:	d907      	bls.n	8003fe0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	f043 0320 	orr.w	r3, r3, #32
 8003fd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003fde:	e006      	b.n	8003fee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d1e9      	bne.n	8003fc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d003      	beq.n	8004004 <I2C_IsErrorOccurred+0xe0>
 8003ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0aa      	beq.n	8003f5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2220      	movs	r2, #32
 8004012:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	f043 0304 	orr.w	r3, r3, #4
 800401a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00b      	beq.n	800404c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004044:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00b      	beq.n	800406e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f043 0308 	orr.w	r3, r3, #8
 800405c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004066:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	f043 0302 	orr.w	r3, r3, #2
 800407e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004088:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01c      	beq.n	80040d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff fe45 	bl	8003d28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <I2C_IsErrorOccurred+0x1bc>)
 80040aa:	400b      	ands	r3, r1
 80040ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80040d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3728      	adds	r7, #40	; 0x28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	fe00e800 	.word	0xfe00e800

080040e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	460b      	mov	r3, r1
 80040f0:	817b      	strh	r3, [r7, #10]
 80040f2:	4613      	mov	r3, r2
 80040f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040fc:	7a7b      	ldrb	r3, [r7, #9]
 80040fe:	041b      	lsls	r3, r3, #16
 8004100:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004104:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	4313      	orrs	r3, r2
 800410e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004112:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	0d5b      	lsrs	r3, r3, #21
 800411e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004122:	4b08      	ldr	r3, [pc, #32]	; (8004144 <I2C_TransferConfig+0x60>)
 8004124:	430b      	orrs	r3, r1
 8004126:	43db      	mvns	r3, r3
 8004128:	ea02 0103 	and.w	r1, r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	03ff63ff 	.word	0x03ff63ff

08004148 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b20      	cmp	r3, #32
 800415c:	d138      	bne.n	80041d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004168:	2302      	movs	r3, #2
 800416a:	e032      	b.n	80041d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2224      	movs	r2, #36	; 0x24
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800419a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6819      	ldr	r1, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d139      	bne.n	8004268 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041fe:	2302      	movs	r3, #2
 8004200:	e033      	b.n	800426a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2224      	movs	r2, #36	; 0x24
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004230:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	e000      	b.n	800426a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004268:	2302      	movs	r3, #2
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <HAL_PWREx_GetVoltageRange+0x18>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40007000 	.word	0x40007000

08004294 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a2:	d130      	bne.n	8004306 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042a4:	4b23      	ldr	r3, [pc, #140]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b0:	d038      	beq.n	8004324 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042b2:	4b20      	ldr	r3, [pc, #128]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042ba:	4a1e      	ldr	r2, [pc, #120]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042c2:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2232      	movs	r2, #50	; 0x32
 80042c8:	fb02 f303 	mul.w	r3, r2, r3
 80042cc:	4a1b      	ldr	r2, [pc, #108]	; (800433c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	0c9b      	lsrs	r3, r3, #18
 80042d4:	3301      	adds	r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d8:	e002      	b.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3b01      	subs	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042e0:	4b14      	ldr	r3, [pc, #80]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ec:	d102      	bne.n	80042f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f2      	bne.n	80042da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004300:	d110      	bne.n	8004324 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e00f      	b.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004312:	d007      	beq.n	8004324 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004314:	4b07      	ldr	r3, [pc, #28]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800431c:	4a05      	ldr	r2, [pc, #20]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800431e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004322:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40007000 	.word	0x40007000
 8004338:	2000000c 	.word	0x2000000c
 800433c:	431bde83 	.word	0x431bde83

08004340 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e3ca      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004352:	4b97      	ldr	r3, [pc, #604]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800435c:	4b94      	ldr	r3, [pc, #592]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80e4 	beq.w	800453c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_RCC_OscConfig+0x4a>
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b0c      	cmp	r3, #12
 800437e:	f040 808b 	bne.w	8004498 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b01      	cmp	r3, #1
 8004386:	f040 8087 	bne.w	8004498 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800438a:	4b89      	ldr	r3, [pc, #548]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x62>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e3a2      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1a      	ldr	r2, [r3, #32]
 80043a6:	4b82      	ldr	r3, [pc, #520]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_RCC_OscConfig+0x7c>
 80043b2:	4b7f      	ldr	r3, [pc, #508]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ba:	e005      	b.n	80043c8 <HAL_RCC_OscConfig+0x88>
 80043bc:	4b7c      	ldr	r3, [pc, #496]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80043be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d223      	bcs.n	8004414 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fd55 	bl	8004e80 <RCC_SetFlashLatencyFromMSIRange>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e383      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e0:	4b73      	ldr	r3, [pc, #460]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a72      	ldr	r2, [pc, #456]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80043e6:	f043 0308 	orr.w	r3, r3, #8
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	4b70      	ldr	r3, [pc, #448]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	496d      	ldr	r1, [pc, #436]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043fe:	4b6c      	ldr	r3, [pc, #432]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	4968      	ldr	r1, [pc, #416]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 800440e:	4313      	orrs	r3, r2
 8004410:	604b      	str	r3, [r1, #4]
 8004412:	e025      	b.n	8004460 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004414:	4b66      	ldr	r3, [pc, #408]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a65      	ldr	r2, [pc, #404]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 800441a:	f043 0308 	orr.w	r3, r3, #8
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b63      	ldr	r3, [pc, #396]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	4960      	ldr	r1, [pc, #384]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004432:	4b5f      	ldr	r3, [pc, #380]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	495b      	ldr	r1, [pc, #364]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 8004442:	4313      	orrs	r3, r2
 8004444:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d109      	bne.n	8004460 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fd15 	bl	8004e80 <RCC_SetFlashLatencyFromMSIRange>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e343      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004460:	f000 fc4a 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b52      	ldr	r3, [pc, #328]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	4950      	ldr	r1, [pc, #320]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
 800447c:	4a4e      	ldr	r2, [pc, #312]	; (80045b8 <HAL_RCC_OscConfig+0x278>)
 800447e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004480:	4b4e      	ldr	r3, [pc, #312]	; (80045bc <HAL_RCC_OscConfig+0x27c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd fa09 	bl	800189c <HAL_InitTick>
 800448a:	4603      	mov	r3, r0
 800448c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d052      	beq.n	800453a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	e327      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d032      	beq.n	8004506 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044a0:	4b43      	ldr	r3, [pc, #268]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a42      	ldr	r2, [pc, #264]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044ac:	f7fd fa46 	bl	800193c <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044b4:	f7fd fa42 	bl	800193c <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e310      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044c6:	4b3a      	ldr	r3, [pc, #232]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044d2:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a36      	ldr	r2, [pc, #216]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80044d8:	f043 0308 	orr.w	r3, r3, #8
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	4b34      	ldr	r3, [pc, #208]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	4931      	ldr	r1, [pc, #196]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044f0:	4b2f      	ldr	r3, [pc, #188]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	492c      	ldr	r1, [pc, #176]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 8004500:	4313      	orrs	r3, r2
 8004502:	604b      	str	r3, [r1, #4]
 8004504:	e01a      	b.n	800453c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a29      	ldr	r2, [pc, #164]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004512:	f7fd fa13 	bl	800193c <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800451a:	f7fd fa0f 	bl	800193c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e2dd      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800452c:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f0      	bne.n	800451a <HAL_RCC_OscConfig+0x1da>
 8004538:	e000      	b.n	800453c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800453a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d074      	beq.n	8004632 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b08      	cmp	r3, #8
 800454c:	d005      	beq.n	800455a <HAL_RCC_OscConfig+0x21a>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b0c      	cmp	r3, #12
 8004552:	d10e      	bne.n	8004572 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d10b      	bne.n	8004572 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d064      	beq.n	8004630 <HAL_RCC_OscConfig+0x2f0>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d160      	bne.n	8004630 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e2ba      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457a:	d106      	bne.n	800458a <HAL_RCC_OscConfig+0x24a>
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 8004582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	e026      	b.n	80045d8 <HAL_RCC_OscConfig+0x298>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004592:	d115      	bne.n	80045c0 <HAL_RCC_OscConfig+0x280>
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a05      	ldr	r2, [pc, #20]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 800459a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a02      	ldr	r2, [pc, #8]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80045a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	e014      	b.n	80045d8 <HAL_RCC_OscConfig+0x298>
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000
 80045b4:	08007390 	.word	0x08007390
 80045b8:	2000000c 	.word	0x2000000c
 80045bc:	20000010 	.word	0x20000010
 80045c0:	4ba0      	ldr	r3, [pc, #640]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a9f      	ldr	r2, [pc, #636]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b9d      	ldr	r3, [pc, #628]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a9c      	ldr	r2, [pc, #624]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80045d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d013      	beq.n	8004608 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fd f9ac 	bl	800193c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fd f9a8 	bl	800193c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e276      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045fa:	4b92      	ldr	r3, [pc, #584]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x2a8>
 8004606:	e014      	b.n	8004632 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd f998 	bl	800193c <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7fd f994 	bl	800193c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e262      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004622:	4b88      	ldr	r3, [pc, #544]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x2d0>
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d060      	beq.n	8004700 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b04      	cmp	r3, #4
 8004642:	d005      	beq.n	8004650 <HAL_RCC_OscConfig+0x310>
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b0c      	cmp	r3, #12
 8004648:	d119      	bne.n	800467e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d116      	bne.n	800467e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004650:	4b7c      	ldr	r3, [pc, #496]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_OscConfig+0x328>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e23f      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004668:	4b76      	ldr	r3, [pc, #472]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	4973      	ldr	r1, [pc, #460]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800467c:	e040      	b.n	8004700 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d023      	beq.n	80046ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004686:	4b6f      	ldr	r3, [pc, #444]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a6e      	ldr	r2, [pc, #440]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004692:	f7fd f953 	bl	800193c <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469a:	f7fd f94f 	bl	800193c <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e21d      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ac:	4b65      	ldr	r3, [pc, #404]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b8:	4b62      	ldr	r3, [pc, #392]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	495f      	ldr	r1, [pc, #380]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
 80046cc:	e018      	b.n	8004700 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ce:	4b5d      	ldr	r3, [pc, #372]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a5c      	ldr	r2, [pc, #368]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80046d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7fd f92f 	bl	800193c <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e2:	f7fd f92b 	bl	800193c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1f9      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046f4:	4b53      	ldr	r3, [pc, #332]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d03c      	beq.n	8004786 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01c      	beq.n	800474e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004714:	4b4b      	ldr	r3, [pc, #300]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800471a:	4a4a      	ldr	r2, [pc, #296]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004724:	f7fd f90a 	bl	800193c <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472c:	f7fd f906 	bl	800193c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e1d4      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800473e:	4b41      	ldr	r3, [pc, #260]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0ef      	beq.n	800472c <HAL_RCC_OscConfig+0x3ec>
 800474c:	e01b      	b.n	8004786 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800474e:	4b3d      	ldr	r3, [pc, #244]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004754:	4a3b      	ldr	r2, [pc, #236]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004756:	f023 0301 	bic.w	r3, r3, #1
 800475a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475e:	f7fd f8ed 	bl	800193c <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004766:	f7fd f8e9 	bl	800193c <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e1b7      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004778:	4b32      	ldr	r3, [pc, #200]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 800477a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1ef      	bne.n	8004766 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80a6 	beq.w	80048e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004794:	2300      	movs	r3, #0
 8004796:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004798:	4b2a      	ldr	r3, [pc, #168]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10d      	bne.n	80047c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a4:	4b27      	ldr	r3, [pc, #156]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	4a26      	ldr	r2, [pc, #152]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80047aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6593      	str	r3, [r2, #88]	; 0x58
 80047b0:	4b24      	ldr	r3, [pc, #144]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 80047b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047bc:	2301      	movs	r3, #1
 80047be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c0:	4b21      	ldr	r3, [pc, #132]	; (8004848 <HAL_RCC_OscConfig+0x508>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d118      	bne.n	80047fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047cc:	4b1e      	ldr	r3, [pc, #120]	; (8004848 <HAL_RCC_OscConfig+0x508>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <HAL_RCC_OscConfig+0x508>)
 80047d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d8:	f7fd f8b0 	bl	800193c <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e0:	f7fd f8ac 	bl	800193c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e17a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <HAL_RCC_OscConfig+0x508>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d108      	bne.n	8004818 <HAL_RCC_OscConfig+0x4d8>
 8004806:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	4a0d      	ldr	r2, [pc, #52]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004816:	e029      	b.n	800486c <HAL_RCC_OscConfig+0x52c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b05      	cmp	r3, #5
 800481e:	d115      	bne.n	800484c <HAL_RCC_OscConfig+0x50c>
 8004820:	4b08      	ldr	r3, [pc, #32]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	4a07      	ldr	r2, [pc, #28]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	4a03      	ldr	r2, [pc, #12]	; (8004844 <HAL_RCC_OscConfig+0x504>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004840:	e014      	b.n	800486c <HAL_RCC_OscConfig+0x52c>
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000
 8004848:	40007000 	.word	0x40007000
 800484c:	4b9c      	ldr	r3, [pc, #624]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	4a9b      	ldr	r2, [pc, #620]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800485c:	4b98      	ldr	r3, [pc, #608]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	4a97      	ldr	r2, [pc, #604]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004864:	f023 0304 	bic.w	r3, r3, #4
 8004868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d016      	beq.n	80048a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fd f862 	bl	800193c <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487a:	e00a      	b.n	8004892 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487c:	f7fd f85e 	bl	800193c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	f241 3288 	movw	r2, #5000	; 0x1388
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e12a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004892:	4b8b      	ldr	r3, [pc, #556]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ed      	beq.n	800487c <HAL_RCC_OscConfig+0x53c>
 80048a0:	e015      	b.n	80048ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a2:	f7fd f84b 	bl	800193c <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fd f847 	bl	800193c <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e113      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c0:	4b7f      	ldr	r3, [pc, #508]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1ed      	bne.n	80048aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ce:	7ffb      	ldrb	r3, [r7, #31]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d105      	bne.n	80048e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d4:	4b7a      	ldr	r3, [pc, #488]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	4a79      	ldr	r2, [pc, #484]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 80048da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80fe 	beq.w	8004ae6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	f040 80d0 	bne.w	8004a94 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048f4:	4b72      	ldr	r3, [pc, #456]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 0203 	and.w	r2, r3, #3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	429a      	cmp	r2, r3
 8004906:	d130      	bne.n	800496a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	3b01      	subs	r3, #1
 8004914:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d127      	bne.n	800496a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004924:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d11f      	bne.n	800496a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004934:	2a07      	cmp	r2, #7
 8004936:	bf14      	ite	ne
 8004938:	2201      	movne	r2, #1
 800493a:	2200      	moveq	r2, #0
 800493c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800493e:	4293      	cmp	r3, r2
 8004940:	d113      	bne.n	800496a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	3b01      	subs	r3, #1
 8004950:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004952:	429a      	cmp	r2, r3
 8004954:	d109      	bne.n	800496a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	3b01      	subs	r3, #1
 8004964:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004966:	429a      	cmp	r2, r3
 8004968:	d06e      	beq.n	8004a48 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d069      	beq.n	8004a44 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004970:	4b53      	ldr	r3, [pc, #332]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800497c:	4b50      	ldr	r3, [pc, #320]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0ad      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800498c:	4b4c      	ldr	r3, [pc, #304]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a4b      	ldr	r2, [pc, #300]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004996:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004998:	f7fc ffd0 	bl	800193c <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a0:	f7fc ffcc 	bl	800193c <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e09a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b2:	4b43      	ldr	r3, [pc, #268]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049be:	4b40      	ldr	r3, [pc, #256]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	4b40      	ldr	r3, [pc, #256]	; (8004ac4 <HAL_RCC_OscConfig+0x784>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049ce:	3a01      	subs	r2, #1
 80049d0:	0112      	lsls	r2, r2, #4
 80049d2:	4311      	orrs	r1, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049d8:	0212      	lsls	r2, r2, #8
 80049da:	4311      	orrs	r1, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049e0:	0852      	lsrs	r2, r2, #1
 80049e2:	3a01      	subs	r2, #1
 80049e4:	0552      	lsls	r2, r2, #21
 80049e6:	4311      	orrs	r1, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049ec:	0852      	lsrs	r2, r2, #1
 80049ee:	3a01      	subs	r2, #1
 80049f0:	0652      	lsls	r2, r2, #25
 80049f2:	4311      	orrs	r1, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049f8:	0912      	lsrs	r2, r2, #4
 80049fa:	0452      	lsls	r2, r2, #17
 80049fc:	430a      	orrs	r2, r1
 80049fe:	4930      	ldr	r1, [pc, #192]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a04:	4b2e      	ldr	r3, [pc, #184]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2d      	ldr	r2, [pc, #180]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a10:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a2a      	ldr	r2, [pc, #168]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a1c:	f7fc ff8e 	bl	800193c <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a24:	f7fc ff8a 	bl	800193c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e058      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a36:	4b22      	ldr	r3, [pc, #136]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a42:	e050      	b.n	8004ae6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e04f      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a48:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d148      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a54:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a60:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	4a16      	ldr	r2, [pc, #88]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a6c:	f7fc ff66 	bl	800193c <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fc ff62 	bl	800193c <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e030      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0x734>
 8004a92:	e028      	b.n	8004ae6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b0c      	cmp	r3, #12
 8004a98:	d023      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9a:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a08      	ldr	r2, [pc, #32]	; (8004ac0 <HAL_RCC_OscConfig+0x780>)
 8004aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fc ff49 	bl	800193c <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aac:	e00c      	b.n	8004ac8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fc ff45 	bl	800193c <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d905      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e013      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac8:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_RCC_OscConfig+0x7b0>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ec      	bne.n	8004aae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_OscConfig+0x7b0>)
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	4905      	ldr	r1, [pc, #20]	; (8004af0 <HAL_RCC_OscConfig+0x7b0>)
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_RCC_OscConfig+0x7b4>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	60cb      	str	r3, [r1, #12]
 8004ae0:	e001      	b.n	8004ae6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000
 8004af4:	feeefffc 	.word	0xfeeefffc

08004af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0e7      	b.n	8004cdc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b0c:	4b75      	ldr	r3, [pc, #468]	; (8004ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d910      	bls.n	8004b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1a:	4b72      	ldr	r3, [pc, #456]	; (8004ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 0207 	bic.w	r2, r3, #7
 8004b22:	4970      	ldr	r1, [pc, #448]	; (8004ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b6e      	ldr	r3, [pc, #440]	; (8004ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0cf      	b.n	8004cdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d010      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	4b66      	ldr	r3, [pc, #408]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d908      	bls.n	8004b6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b58:	4b63      	ldr	r3, [pc, #396]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4960      	ldr	r1, [pc, #384]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d04c      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b7e:	4b5a      	ldr	r3, [pc, #360]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d121      	bne.n	8004bce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e0a6      	b.n	8004cdc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b96:	4b54      	ldr	r3, [pc, #336]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d115      	bne.n	8004bce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e09a      	b.n	8004cdc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d107      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bae:	4b4e      	ldr	r3, [pc, #312]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e08e      	b.n	8004cdc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bbe:	4b4a      	ldr	r3, [pc, #296]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e086      	b.n	8004cdc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bce:	4b46      	ldr	r3, [pc, #280]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f023 0203 	bic.w	r2, r3, #3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4943      	ldr	r1, [pc, #268]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be0:	f7fc feac 	bl	800193c <HAL_GetTick>
 8004be4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be8:	f7fc fea8 	bl	800193c <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e06e      	b.n	8004cdc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfe:	4b3a      	ldr	r3, [pc, #232]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 020c 	and.w	r2, r3, #12
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d1eb      	bne.n	8004be8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d010      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d208      	bcs.n	8004c3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	492b      	ldr	r1, [pc, #172]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3e:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d210      	bcs.n	8004c6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4c:	4b25      	ldr	r3, [pc, #148]	; (8004ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f023 0207 	bic.w	r2, r3, #7
 8004c54:	4923      	ldr	r1, [pc, #140]	; (8004ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5c:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d001      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e036      	b.n	8004cdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d008      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	4918      	ldr	r1, [pc, #96]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c98:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	4910      	ldr	r1, [pc, #64]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cac:	f000 f824 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	490b      	ldr	r1, [pc, #44]	; (8004cec <HAL_RCC_ClockConfig+0x1f4>)
 8004cbe:	5ccb      	ldrb	r3, [r1, r3]
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc8:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8004cca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <HAL_RCC_ClockConfig+0x1fc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fc fde3 	bl	800189c <HAL_InitTick>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cda:	7afb      	ldrb	r3, [r7, #11]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40022000 	.word	0x40022000
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	08007390 	.word	0x08007390
 8004cf0:	2000000c 	.word	0x2000000c
 8004cf4:	20000010 	.word	0x20000010

08004cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	; 0x24
 8004cfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d06:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d10:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0x34>
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b0c      	cmp	r3, #12
 8004d24:	d121      	bne.n	8004d6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d11e      	bne.n	8004d6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d2c:	4b34      	ldr	r3, [pc, #208]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d107      	bne.n	8004d48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d38:	4b31      	ldr	r3, [pc, #196]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d3e:	0a1b      	lsrs	r3, r3, #8
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	e005      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d48:	4b2d      	ldr	r3, [pc, #180]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d54:	4a2b      	ldr	r2, [pc, #172]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10d      	bne.n	8004d80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d68:	e00a      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d102      	bne.n	8004d76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d72:	61bb      	str	r3, [r7, #24]
 8004d74:	e004      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d7c:	4b23      	ldr	r3, [pc, #140]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x114>)
 8004d7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b0c      	cmp	r3, #12
 8004d84:	d134      	bne.n	8004df0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d86:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d003      	beq.n	8004d9e <HAL_RCC_GetSysClockFreq+0xa6>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d003      	beq.n	8004da4 <HAL_RCC_GetSysClockFreq+0xac>
 8004d9c:	e005      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d9e:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x110>)
 8004da0:	617b      	str	r3, [r7, #20]
      break;
 8004da2:	e005      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004da4:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x114>)
 8004da6:	617b      	str	r3, [r7, #20]
      break;
 8004da8:	e002      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	617b      	str	r3, [r7, #20]
      break;
 8004dae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004db0:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	091b      	lsrs	r3, r3, #4
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	3301      	adds	r3, #1
 8004dbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dbe:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	fb03 f202 	mul.w	r2, r3, r2
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dd6:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	0e5b      	lsrs	r3, r3, #25
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	3301      	adds	r3, #1
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004df0:	69bb      	ldr	r3, [r7, #24]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3724      	adds	r7, #36	; 0x24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40021000 	.word	0x40021000
 8004e04:	080073a8 	.word	0x080073a8
 8004e08:	00f42400 	.word	0x00f42400
 8004e0c:	007a1200 	.word	0x007a1200

08004e10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e14:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e16:	681b      	ldr	r3, [r3, #0]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	2000000c 	.word	0x2000000c

08004e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e2c:	f7ff fff0 	bl	8004e10 <HAL_RCC_GetHCLKFreq>
 8004e30:	4602      	mov	r2, r0
 8004e32:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	4904      	ldr	r1, [pc, #16]	; (8004e50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e3e:	5ccb      	ldrb	r3, [r1, r3]
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	080073a0 	.word	0x080073a0

08004e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e58:	f7ff ffda 	bl	8004e10 <HAL_RCC_GetHCLKFreq>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	0adb      	lsrs	r3, r3, #11
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	4904      	ldr	r1, [pc, #16]	; (8004e7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e6a:	5ccb      	ldrb	r3, [r1, r3]
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	080073a0 	.word	0x080073a0

08004e80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e88:	2300      	movs	r3, #0
 8004e8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e8c:	4b2a      	ldr	r3, [pc, #168]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e98:	f7ff f9ee 	bl	8004278 <HAL_PWREx_GetVoltageRange>
 8004e9c:	6178      	str	r0, [r7, #20]
 8004e9e:	e014      	b.n	8004eca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ea0:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	4a24      	ldr	r2, [pc, #144]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8004eac:	4b22      	ldr	r3, [pc, #136]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004eb8:	f7ff f9de 	bl	8004278 <HAL_PWREx_GetVoltageRange>
 8004ebc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ebe:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	4a1d      	ldr	r2, [pc, #116]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed0:	d10b      	bne.n	8004eea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b80      	cmp	r3, #128	; 0x80
 8004ed6:	d919      	bls.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2ba0      	cmp	r3, #160	; 0xa0
 8004edc:	d902      	bls.n	8004ee4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ede:	2302      	movs	r3, #2
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	e013      	b.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	e010      	b.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b80      	cmp	r3, #128	; 0x80
 8004eee:	d902      	bls.n	8004ef6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	e00a      	b.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b80      	cmp	r3, #128	; 0x80
 8004efa:	d102      	bne.n	8004f02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004efc:	2302      	movs	r3, #2
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	e004      	b.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b70      	cmp	r3, #112	; 0x70
 8004f06:	d101      	bne.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f08:	2301      	movs	r3, #1
 8004f0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f023 0207 	bic.w	r2, r3, #7
 8004f14:	4909      	ldr	r1, [pc, #36]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f1c:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d001      	beq.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40022000 	.word	0x40022000

08004f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f48:	2300      	movs	r3, #0
 8004f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d041      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f64:	d02a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f6a:	d824      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f70:	d008      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f76:	d81e      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f80:	d010      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f82:	e018      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f84:	4b86      	ldr	r3, [pc, #536]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a85      	ldr	r2, [pc, #532]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f90:	e015      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3304      	adds	r3, #4
 8004f96:	2100      	movs	r1, #0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fabb 	bl	8005514 <RCCEx_PLLSAI1_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fa2:	e00c      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3320      	adds	r3, #32
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fba6 	bl	80056fc <RCCEx_PLLSAI2_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fb4:	e003      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	74fb      	strb	r3, [r7, #19]
      break;
 8004fba:	e000      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fbe:	7cfb      	ldrb	r3, [r7, #19]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fc4:	4b76      	ldr	r3, [pc, #472]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fd2:	4973      	ldr	r1, [pc, #460]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fda:	e001      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d041      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ff0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ff4:	d02a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ff6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ffa:	d824      	bhi.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005000:	d008      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005002:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005006:	d81e      	bhi.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800500c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005010:	d010      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005012:	e018      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005014:	4b62      	ldr	r3, [pc, #392]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a61      	ldr	r2, [pc, #388]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005020:	e015      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3304      	adds	r3, #4
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fa73 	bl	8005514 <RCCEx_PLLSAI1_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005032:	e00c      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3320      	adds	r3, #32
 8005038:	2100      	movs	r1, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fb5e 	bl	80056fc <RCCEx_PLLSAI2_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005044:	e003      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	74fb      	strb	r3, [r7, #19]
      break;
 800504a:	e000      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800504c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800504e:	7cfb      	ldrb	r3, [r7, #19]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10b      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005054:	4b52      	ldr	r3, [pc, #328]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005062:	494f      	ldr	r1, [pc, #316]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800506a:	e001      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506c:	7cfb      	ldrb	r3, [r7, #19]
 800506e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80a0 	beq.w	80051be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507e:	2300      	movs	r3, #0
 8005080:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005082:	4b47      	ldr	r3, [pc, #284]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005092:	2300      	movs	r3, #0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005098:	4b41      	ldr	r3, [pc, #260]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509c:	4a40      	ldr	r2, [pc, #256]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a2:	6593      	str	r3, [r2, #88]	; 0x58
 80050a4:	4b3e      	ldr	r3, [pc, #248]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b0:	2301      	movs	r3, #1
 80050b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b4:	4b3b      	ldr	r3, [pc, #236]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a3a      	ldr	r2, [pc, #232]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050c0:	f7fc fc3c 	bl	800193c <HAL_GetTick>
 80050c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050c6:	e009      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c8:	f7fc fc38 	bl	800193c <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d902      	bls.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	74fb      	strb	r3, [r7, #19]
        break;
 80050da:	e005      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050dc:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ef      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80050e8:	7cfb      	ldrb	r3, [r7, #19]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d15c      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050ee:	4b2c      	ldr	r3, [pc, #176]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01f      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	429a      	cmp	r2, r3
 800510a:	d019      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800510c:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005116:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005118:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	4a20      	ldr	r2, [pc, #128]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	4a1c      	ldr	r2, [pc, #112]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005138:	4a19      	ldr	r2, [pc, #100]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514a:	f7fc fbf7 	bl	800193c <HAL_GetTick>
 800514e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005150:	e00b      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005152:	f7fc fbf3 	bl	800193c <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	4293      	cmp	r3, r2
 8005162:	d902      	bls.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	74fb      	strb	r3, [r7, #19]
            break;
 8005168:	e006      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0ec      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800517e:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518e:	4904      	ldr	r1, [pc, #16]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005196:	e009      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005198:	7cfb      	ldrb	r3, [r7, #19]
 800519a:	74bb      	strb	r3, [r7, #18]
 800519c:	e006      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800519e:	bf00      	nop
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	7cfb      	ldrb	r3, [r7, #19]
 80051aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ac:	7c7b      	ldrb	r3, [r7, #17]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d105      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b2:	4b9e      	ldr	r3, [pc, #632]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b6:	4a9d      	ldr	r2, [pc, #628]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ca:	4b98      	ldr	r3, [pc, #608]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d0:	f023 0203 	bic.w	r2, r3, #3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	4994      	ldr	r1, [pc, #592]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051ec:	4b8f      	ldr	r3, [pc, #572]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	f023 020c 	bic.w	r2, r3, #12
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	498c      	ldr	r1, [pc, #560]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800520e:	4b87      	ldr	r3, [pc, #540]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005214:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	4983      	ldr	r1, [pc, #524]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005230:	4b7e      	ldr	r3, [pc, #504]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005236:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523e:	497b      	ldr	r1, [pc, #492]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005252:	4b76      	ldr	r3, [pc, #472]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005260:	4972      	ldr	r1, [pc, #456]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005274:	4b6d      	ldr	r3, [pc, #436]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005282:	496a      	ldr	r1, [pc, #424]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005296:	4b65      	ldr	r3, [pc, #404]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a4:	4961      	ldr	r1, [pc, #388]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052b8:	4b5c      	ldr	r3, [pc, #368]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c6:	4959      	ldr	r1, [pc, #356]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052da:	4b54      	ldr	r3, [pc, #336]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e8:	4950      	ldr	r1, [pc, #320]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052fc:	4b4b      	ldr	r3, [pc, #300]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005302:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530a:	4948      	ldr	r1, [pc, #288]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800531e:	4b43      	ldr	r3, [pc, #268]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532c:	493f      	ldr	r1, [pc, #252]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d028      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005340:	4b3a      	ldr	r3, [pc, #232]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534e:	4937      	ldr	r1, [pc, #220]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800535a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800535e:	d106      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005360:	4b32      	ldr	r3, [pc, #200]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4a31      	ldr	r2, [pc, #196]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800536a:	60d3      	str	r3, [r2, #12]
 800536c:	e011      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005376:	d10c      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f8c8 	bl	8005514 <RCCEx_PLLSAI1_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005388:	7cfb      	ldrb	r3, [r7, #19]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800538e:	7cfb      	ldrb	r3, [r7, #19]
 8005390:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d028      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800539e:	4b23      	ldr	r3, [pc, #140]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ac:	491f      	ldr	r1, [pc, #124]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053bc:	d106      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053be:	4b1b      	ldr	r3, [pc, #108]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	4a1a      	ldr	r2, [pc, #104]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053c8:	60d3      	str	r3, [r2, #12]
 80053ca:	e011      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3304      	adds	r3, #4
 80053da:	2101      	movs	r1, #1
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 f899 	bl	8005514 <RCCEx_PLLSAI1_Config>
 80053e2:	4603      	mov	r3, r0
 80053e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d02b      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540a:	4908      	ldr	r1, [pc, #32]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800541a:	d109      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a02      	ldr	r2, [pc, #8]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005426:	60d3      	str	r3, [r2, #12]
 8005428:	e014      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800542a:	bf00      	nop
 800542c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005434:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005438:	d10c      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3304      	adds	r3, #4
 800543e:	2101      	movs	r1, #1
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f867 	bl	8005514 <RCCEx_PLLSAI1_Config>
 8005446:	4603      	mov	r3, r0
 8005448:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800544a:	7cfb      	ldrb	r3, [r7, #19]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005450:	7cfb      	ldrb	r3, [r7, #19]
 8005452:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d02f      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005460:	4b2b      	ldr	r3, [pc, #172]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800546e:	4928      	ldr	r1, [pc, #160]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800547a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800547e:	d10d      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3304      	adds	r3, #4
 8005484:	2102      	movs	r1, #2
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f844 	bl	8005514 <RCCEx_PLLSAI1_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005490:	7cfb      	ldrb	r3, [r7, #19]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d014      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005496:	7cfb      	ldrb	r3, [r7, #19]
 8005498:	74bb      	strb	r3, [r7, #18]
 800549a:	e011      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a4:	d10c      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3320      	adds	r3, #32
 80054aa:	2102      	movs	r1, #2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 f925 	bl	80056fc <RCCEx_PLLSAI2_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054b6:	7cfb      	ldrb	r3, [r7, #19]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054bc:	7cfb      	ldrb	r3, [r7, #19]
 80054be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054cc:	4b10      	ldr	r3, [pc, #64]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054da:	490d      	ldr	r1, [pc, #52]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054ee:	4b08      	ldr	r3, [pc, #32]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fe:	4904      	ldr	r1, [pc, #16]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005506:	7cbb      	ldrb	r3, [r7, #18]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40021000 	.word	0x40021000

08005514 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005522:	4b75      	ldr	r3, [pc, #468]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d018      	beq.n	8005560 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800552e:	4b72      	ldr	r3, [pc, #456]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0203 	and.w	r2, r3, #3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d10d      	bne.n	800555a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
       ||
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005546:	4b6c      	ldr	r3, [pc, #432]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	091b      	lsrs	r3, r3, #4
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
       ||
 8005556:	429a      	cmp	r2, r3
 8005558:	d047      	beq.n	80055ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	73fb      	strb	r3, [r7, #15]
 800555e:	e044      	b.n	80055ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d018      	beq.n	800559a <RCCEx_PLLSAI1_Config+0x86>
 8005568:	2b03      	cmp	r3, #3
 800556a:	d825      	bhi.n	80055b8 <RCCEx_PLLSAI1_Config+0xa4>
 800556c:	2b01      	cmp	r3, #1
 800556e:	d002      	beq.n	8005576 <RCCEx_PLLSAI1_Config+0x62>
 8005570:	2b02      	cmp	r3, #2
 8005572:	d009      	beq.n	8005588 <RCCEx_PLLSAI1_Config+0x74>
 8005574:	e020      	b.n	80055b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005576:	4b60      	ldr	r3, [pc, #384]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d11d      	bne.n	80055be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005586:	e01a      	b.n	80055be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005588:	4b5b      	ldr	r3, [pc, #364]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005590:	2b00      	cmp	r3, #0
 8005592:	d116      	bne.n	80055c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005598:	e013      	b.n	80055c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800559a:	4b57      	ldr	r3, [pc, #348]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10f      	bne.n	80055c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055a6:	4b54      	ldr	r3, [pc, #336]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055b6:	e006      	b.n	80055c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
      break;
 80055bc:	e004      	b.n	80055c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055be:	bf00      	nop
 80055c0:	e002      	b.n	80055c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10d      	bne.n	80055ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055ce:	4b4a      	ldr	r3, [pc, #296]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6819      	ldr	r1, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	3b01      	subs	r3, #1
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	430b      	orrs	r3, r1
 80055e4:	4944      	ldr	r1, [pc, #272]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d17d      	bne.n	80056ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055f0:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a40      	ldr	r2, [pc, #256]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055fc:	f7fc f99e 	bl	800193c <HAL_GetTick>
 8005600:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005602:	e009      	b.n	8005618 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005604:	f7fc f99a 	bl	800193c <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d902      	bls.n	8005618 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	73fb      	strb	r3, [r7, #15]
        break;
 8005616:	e005      	b.n	8005624 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005618:	4b37      	ldr	r3, [pc, #220]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1ef      	bne.n	8005604 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d160      	bne.n	80056ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d111      	bne.n	8005654 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005630:	4b31      	ldr	r3, [pc, #196]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6892      	ldr	r2, [r2, #8]
 8005640:	0211      	lsls	r1, r2, #8
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68d2      	ldr	r2, [r2, #12]
 8005646:	0912      	lsrs	r2, r2, #4
 8005648:	0452      	lsls	r2, r2, #17
 800564a:	430a      	orrs	r2, r1
 800564c:	492a      	ldr	r1, [pc, #168]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564e:	4313      	orrs	r3, r2
 8005650:	610b      	str	r3, [r1, #16]
 8005652:	e027      	b.n	80056a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d112      	bne.n	8005680 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800565a:	4b27      	ldr	r3, [pc, #156]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005662:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6892      	ldr	r2, [r2, #8]
 800566a:	0211      	lsls	r1, r2, #8
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6912      	ldr	r2, [r2, #16]
 8005670:	0852      	lsrs	r2, r2, #1
 8005672:	3a01      	subs	r2, #1
 8005674:	0552      	lsls	r2, r2, #21
 8005676:	430a      	orrs	r2, r1
 8005678:	491f      	ldr	r1, [pc, #124]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567a:	4313      	orrs	r3, r2
 800567c:	610b      	str	r3, [r1, #16]
 800567e:	e011      	b.n	80056a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005680:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005688:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6892      	ldr	r2, [r2, #8]
 8005690:	0211      	lsls	r1, r2, #8
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6952      	ldr	r2, [r2, #20]
 8005696:	0852      	lsrs	r2, r2, #1
 8005698:	3a01      	subs	r2, #1
 800569a:	0652      	lsls	r2, r2, #25
 800569c:	430a      	orrs	r2, r1
 800569e:	4916      	ldr	r1, [pc, #88]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056a4:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b0:	f7fc f944 	bl	800193c <HAL_GetTick>
 80056b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056b6:	e009      	b.n	80056cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056b8:	f7fc f940 	bl	800193c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d902      	bls.n	80056cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	73fb      	strb	r3, [r7, #15]
          break;
 80056ca:	e005      	b.n	80056d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0ef      	beq.n	80056b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056de:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	4904      	ldr	r1, [pc, #16]	; (80056f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40021000 	.word	0x40021000

080056fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800570a:	4b6a      	ldr	r3, [pc, #424]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d018      	beq.n	8005748 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005716:	4b67      	ldr	r3, [pc, #412]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0203 	and.w	r2, r3, #3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d10d      	bne.n	8005742 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
       ||
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800572e:	4b61      	ldr	r3, [pc, #388]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	091b      	lsrs	r3, r3, #4
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
       ||
 800573e:	429a      	cmp	r2, r3
 8005740:	d047      	beq.n	80057d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
 8005746:	e044      	b.n	80057d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d018      	beq.n	8005782 <RCCEx_PLLSAI2_Config+0x86>
 8005750:	2b03      	cmp	r3, #3
 8005752:	d825      	bhi.n	80057a0 <RCCEx_PLLSAI2_Config+0xa4>
 8005754:	2b01      	cmp	r3, #1
 8005756:	d002      	beq.n	800575e <RCCEx_PLLSAI2_Config+0x62>
 8005758:	2b02      	cmp	r3, #2
 800575a:	d009      	beq.n	8005770 <RCCEx_PLLSAI2_Config+0x74>
 800575c:	e020      	b.n	80057a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800575e:	4b55      	ldr	r3, [pc, #340]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11d      	bne.n	80057a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800576e:	e01a      	b.n	80057a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005770:	4b50      	ldr	r3, [pc, #320]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005778:	2b00      	cmp	r3, #0
 800577a:	d116      	bne.n	80057aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005780:	e013      	b.n	80057aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005782:	4b4c      	ldr	r3, [pc, #304]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800578e:	4b49      	ldr	r3, [pc, #292]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800579e:	e006      	b.n	80057ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	73fb      	strb	r3, [r7, #15]
      break;
 80057a4:	e004      	b.n	80057b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057a6:	bf00      	nop
 80057a8:	e002      	b.n	80057b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057aa:	bf00      	nop
 80057ac:	e000      	b.n	80057b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10d      	bne.n	80057d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057b6:	4b3f      	ldr	r3, [pc, #252]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6819      	ldr	r1, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	430b      	orrs	r3, r1
 80057cc:	4939      	ldr	r1, [pc, #228]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d167      	bne.n	80058a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057d8:	4b36      	ldr	r3, [pc, #216]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a35      	ldr	r2, [pc, #212]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e4:	f7fc f8aa 	bl	800193c <HAL_GetTick>
 80057e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057ea:	e009      	b.n	8005800 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057ec:	f7fc f8a6 	bl	800193c <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d902      	bls.n	8005800 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	73fb      	strb	r3, [r7, #15]
        break;
 80057fe:	e005      	b.n	800580c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005800:	4b2c      	ldr	r3, [pc, #176]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1ef      	bne.n	80057ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d14a      	bne.n	80058a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d111      	bne.n	800583c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005818:	4b26      	ldr	r3, [pc, #152]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6892      	ldr	r2, [r2, #8]
 8005828:	0211      	lsls	r1, r2, #8
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68d2      	ldr	r2, [r2, #12]
 800582e:	0912      	lsrs	r2, r2, #4
 8005830:	0452      	lsls	r2, r2, #17
 8005832:	430a      	orrs	r2, r1
 8005834:	491f      	ldr	r1, [pc, #124]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005836:	4313      	orrs	r3, r2
 8005838:	614b      	str	r3, [r1, #20]
 800583a:	e011      	b.n	8005860 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800583c:	4b1d      	ldr	r3, [pc, #116]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005844:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6892      	ldr	r2, [r2, #8]
 800584c:	0211      	lsls	r1, r2, #8
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6912      	ldr	r2, [r2, #16]
 8005852:	0852      	lsrs	r2, r2, #1
 8005854:	3a01      	subs	r2, #1
 8005856:	0652      	lsls	r2, r2, #25
 8005858:	430a      	orrs	r2, r1
 800585a:	4916      	ldr	r1, [pc, #88]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800585c:	4313      	orrs	r3, r2
 800585e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005860:	4b14      	ldr	r3, [pc, #80]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a13      	ldr	r2, [pc, #76]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586c:	f7fc f866 	bl	800193c <HAL_GetTick>
 8005870:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005872:	e009      	b.n	8005888 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005874:	f7fc f862 	bl	800193c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d902      	bls.n	8005888 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	73fb      	strb	r3, [r7, #15]
          break;
 8005886:	e005      	b.n	8005894 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0ef      	beq.n	8005874 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800589c:	695a      	ldr	r2, [r3, #20]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	4904      	ldr	r1, [pc, #16]	; (80058b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40021000 	.word	0x40021000

080058b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e049      	b.n	800595e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fb feb0 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4619      	mov	r1, r3
 80058f6:	4610      	mov	r0, r2
 80058f8:	f000 fa9a 	bl	8005e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b01      	cmp	r3, #1
 800597a:	d001      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e04f      	b.n	8005a20 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a23      	ldr	r2, [pc, #140]	; (8005a2c <HAL_TIM_Base_Start_IT+0xc4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d01d      	beq.n	80059de <HAL_TIM_Base_Start_IT+0x76>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059aa:	d018      	beq.n	80059de <HAL_TIM_Base_Start_IT+0x76>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <HAL_TIM_Base_Start_IT+0xc8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <HAL_TIM_Base_Start_IT+0x76>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1e      	ldr	r2, [pc, #120]	; (8005a34 <HAL_TIM_Base_Start_IT+0xcc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00e      	beq.n	80059de <HAL_TIM_Base_Start_IT+0x76>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1c      	ldr	r2, [pc, #112]	; (8005a38 <HAL_TIM_Base_Start_IT+0xd0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d009      	beq.n	80059de <HAL_TIM_Base_Start_IT+0x76>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1b      	ldr	r2, [pc, #108]	; (8005a3c <HAL_TIM_Base_Start_IT+0xd4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d004      	beq.n	80059de <HAL_TIM_Base_Start_IT+0x76>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <HAL_TIM_Base_Start_IT+0xd8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d115      	bne.n	8005a0a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	4b17      	ldr	r3, [pc, #92]	; (8005a44 <HAL_TIM_Base_Start_IT+0xdc>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b06      	cmp	r3, #6
 80059ee:	d015      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0xb4>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f6:	d011      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a08:	e008      	b.n	8005a1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0201 	orr.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	e000      	b.n	8005a1e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40013400 	.word	0x40013400
 8005a40:	40014000 	.word	0x40014000
 8005a44:	00010007 	.word	0x00010007

08005a48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d020      	beq.n	8005aac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01b      	beq.n	8005aac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0202 	mvn.w	r2, #2
 8005a7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f9ad 	bl	8005df2 <HAL_TIM_IC_CaptureCallback>
 8005a98:	e005      	b.n	8005aa6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f99f 	bl	8005dde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f9b0 	bl	8005e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d020      	beq.n	8005af8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0204 	mvn.w	r2, #4
 8005ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2202      	movs	r2, #2
 8005ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f987 	bl	8005df2 <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f979 	bl	8005dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f98a 	bl	8005e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d020      	beq.n	8005b44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d01b      	beq.n	8005b44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0208 	mvn.w	r2, #8
 8005b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2204      	movs	r2, #4
 8005b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f961 	bl	8005df2 <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f953 	bl	8005dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f964 	bl	8005e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d020      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0210 	mvn.w	r2, #16
 8005b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2208      	movs	r2, #8
 8005b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f93b 	bl	8005df2 <HAL_TIM_IC_CaptureCallback>
 8005b7c:	e005      	b.n	8005b8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f92d 	bl	8005dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f93e 	bl	8005e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00c      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0201 	mvn.w	r2, #1
 8005bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fb fb7e 	bl	80012b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00c      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 faf2 	bl	80061bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 faea 	bl	80061d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00c      	beq.n	8005c20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f8fd 	bl	8005e1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00c      	beq.n	8005c44 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d007      	beq.n	8005c44 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0220 	mvn.w	r2, #32
 8005c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fab2 	bl	80061a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_TIM_ConfigClockSource+0x1c>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e0b6      	b.n	8005dd6 <HAL_TIM_ConfigClockSource+0x18a>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca4:	d03e      	beq.n	8005d24 <HAL_TIM_ConfigClockSource+0xd8>
 8005ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005caa:	f200 8087 	bhi.w	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb2:	f000 8086 	beq.w	8005dc2 <HAL_TIM_ConfigClockSource+0x176>
 8005cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cba:	d87f      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cbc:	2b70      	cmp	r3, #112	; 0x70
 8005cbe:	d01a      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0xaa>
 8005cc0:	2b70      	cmp	r3, #112	; 0x70
 8005cc2:	d87b      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cc4:	2b60      	cmp	r3, #96	; 0x60
 8005cc6:	d050      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x11e>
 8005cc8:	2b60      	cmp	r3, #96	; 0x60
 8005cca:	d877      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005ccc:	2b50      	cmp	r3, #80	; 0x50
 8005cce:	d03c      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0xfe>
 8005cd0:	2b50      	cmp	r3, #80	; 0x50
 8005cd2:	d873      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	d058      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0x13e>
 8005cd8:	2b40      	cmp	r3, #64	; 0x40
 8005cda:	d86f      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cdc:	2b30      	cmp	r3, #48	; 0x30
 8005cde:	d064      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x15e>
 8005ce0:	2b30      	cmp	r3, #48	; 0x30
 8005ce2:	d86b      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d060      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x15e>
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d867      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d05c      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x15e>
 8005cf0:	2b10      	cmp	r3, #16
 8005cf2:	d05a      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x15e>
 8005cf4:	e062      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d06:	f000 f9a7 	bl	8006058 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	609a      	str	r2, [r3, #8]
      break;
 8005d22:	e04f      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d34:	f000 f990 	bl	8006058 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d46:	609a      	str	r2, [r3, #8]
      break;
 8005d48:	e03c      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d56:	461a      	mov	r2, r3
 8005d58:	f000 f904 	bl	8005f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2150      	movs	r1, #80	; 0x50
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 f95d 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005d68:	e02c      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d76:	461a      	mov	r2, r3
 8005d78:	f000 f923 	bl	8005fc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2160      	movs	r1, #96	; 0x60
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 f94d 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005d88:	e01c      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d96:	461a      	mov	r2, r3
 8005d98:	f000 f8e4 	bl	8005f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2140      	movs	r1, #64	; 0x40
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 f93d 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005da8:	e00c      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f000 f934 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005dba:	e003      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc0:	e000      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a40      	ldr	r2, [pc, #256]	; (8005f44 <TIM_Base_SetConfig+0x114>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d013      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4e:	d00f      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a3d      	ldr	r2, [pc, #244]	; (8005f48 <TIM_Base_SetConfig+0x118>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00b      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a3c      	ldr	r2, [pc, #240]	; (8005f4c <TIM_Base_SetConfig+0x11c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d007      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a3b      	ldr	r2, [pc, #236]	; (8005f50 <TIM_Base_SetConfig+0x120>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a3a      	ldr	r2, [pc, #232]	; (8005f54 <TIM_Base_SetConfig+0x124>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d108      	bne.n	8005e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a2f      	ldr	r2, [pc, #188]	; (8005f44 <TIM_Base_SetConfig+0x114>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d01f      	beq.n	8005eca <TIM_Base_SetConfig+0x9a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e90:	d01b      	beq.n	8005eca <TIM_Base_SetConfig+0x9a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2c      	ldr	r2, [pc, #176]	; (8005f48 <TIM_Base_SetConfig+0x118>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d017      	beq.n	8005eca <TIM_Base_SetConfig+0x9a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a2b      	ldr	r2, [pc, #172]	; (8005f4c <TIM_Base_SetConfig+0x11c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d013      	beq.n	8005eca <TIM_Base_SetConfig+0x9a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <TIM_Base_SetConfig+0x120>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00f      	beq.n	8005eca <TIM_Base_SetConfig+0x9a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a29      	ldr	r2, [pc, #164]	; (8005f54 <TIM_Base_SetConfig+0x124>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00b      	beq.n	8005eca <TIM_Base_SetConfig+0x9a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a28      	ldr	r2, [pc, #160]	; (8005f58 <TIM_Base_SetConfig+0x128>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d007      	beq.n	8005eca <TIM_Base_SetConfig+0x9a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a27      	ldr	r2, [pc, #156]	; (8005f5c <TIM_Base_SetConfig+0x12c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d003      	beq.n	8005eca <TIM_Base_SetConfig+0x9a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a26      	ldr	r2, [pc, #152]	; (8005f60 <TIM_Base_SetConfig+0x130>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d108      	bne.n	8005edc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a10      	ldr	r2, [pc, #64]	; (8005f44 <TIM_Base_SetConfig+0x114>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00f      	beq.n	8005f28 <TIM_Base_SetConfig+0xf8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <TIM_Base_SetConfig+0x124>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00b      	beq.n	8005f28 <TIM_Base_SetConfig+0xf8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a11      	ldr	r2, [pc, #68]	; (8005f58 <TIM_Base_SetConfig+0x128>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d007      	beq.n	8005f28 <TIM_Base_SetConfig+0xf8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a10      	ldr	r2, [pc, #64]	; (8005f5c <TIM_Base_SetConfig+0x12c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_Base_SetConfig+0xf8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a0f      	ldr	r2, [pc, #60]	; (8005f60 <TIM_Base_SetConfig+0x130>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d103      	bne.n	8005f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	615a      	str	r2, [r3, #20]
}
 8005f36:	bf00      	nop
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40012c00 	.word	0x40012c00
 8005f48:	40000400 	.word	0x40000400
 8005f4c:	40000800 	.word	0x40000800
 8005f50:	40000c00 	.word	0x40000c00
 8005f54:	40013400 	.word	0x40013400
 8005f58:	40014000 	.word	0x40014000
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800

08005f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f023 0201 	bic.w	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f023 030a 	bic.w	r3, r3, #10
 8005fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f023 0210 	bic.w	r2, r3, #16
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	031b      	lsls	r3, r3, #12
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ffe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	f043 0307 	orr.w	r3, r3, #7
 8006044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	609a      	str	r2, [r3, #8]
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	021a      	lsls	r2, r3, #8
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	431a      	orrs	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4313      	orrs	r3, r2
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	609a      	str	r2, [r3, #8]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e068      	b.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a2e      	ldr	r2, [pc, #184]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a2d      	ldr	r2, [pc, #180]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d108      	bne.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1e      	ldr	r2, [pc, #120]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d01d      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006122:	d018      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1b      	ldr	r2, [pc, #108]	; (8006198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d013      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1a      	ldr	r2, [pc, #104]	; (800619c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d00e      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a18      	ldr	r2, [pc, #96]	; (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d009      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a13      	ldr	r2, [pc, #76]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d004      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a14      	ldr	r2, [pc, #80]	; (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d10c      	bne.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800615c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	4313      	orrs	r3, r2
 8006166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40013400 	.word	0x40013400
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40014000 	.word	0x40014000

080061a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e040      	b.n	8006278 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fb fa40 	bl	800168c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2224      	movs	r2, #36	; 0x24
 8006210:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0201 	bic.w	r2, r2, #1
 8006220:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fdea 	bl	8006e04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fb2f 	bl	8006894 <UART_SetConfig>
 8006236:	4603      	mov	r3, r0
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e01b      	b.n	8006278 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800624e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800625e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fe69 	bl	8006f48 <UART_CheckIdleState>
 8006276:	4603      	mov	r3, r0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b0ba      	sub	sp, #232	; 0xe8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80062aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80062ae:	4013      	ands	r3, r2
 80062b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d115      	bne.n	80062e8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00f      	beq.n	80062e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d009      	beq.n	80062e8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 82ae 	beq.w	800683a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	4798      	blx	r3
      }
      return;
 80062e6:	e2a8      	b.n	800683a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80062e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8117 	beq.w	8006520 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006302:	4b85      	ldr	r3, [pc, #532]	; (8006518 <HAL_UART_IRQHandler+0x298>)
 8006304:	4013      	ands	r3, r2
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 810a 	beq.w	8006520 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800630c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d011      	beq.n	800633c <HAL_UART_IRQHandler+0xbc>
 8006318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00b      	beq.n	800633c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2201      	movs	r2, #1
 800632a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006332:	f043 0201 	orr.w	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800633c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d011      	beq.n	800636c <HAL_UART_IRQHandler+0xec>
 8006348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2202      	movs	r2, #2
 800635a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006362:	f043 0204 	orr.w	r2, r3, #4
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800636c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d011      	beq.n	800639c <HAL_UART_IRQHandler+0x11c>
 8006378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2204      	movs	r2, #4
 800638a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006392:	f043 0202 	orr.w	r2, r3, #2
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800639c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d017      	beq.n	80063d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ac:	f003 0320 	and.w	r3, r3, #32
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d105      	bne.n	80063c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2208      	movs	r2, #8
 80063c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ce:	f043 0208 	orr.w	r2, r3, #8
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d012      	beq.n	800640a <HAL_UART_IRQHandler+0x18a>
 80063e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00c      	beq.n	800640a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006400:	f043 0220 	orr.w	r2, r3, #32
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 8214 	beq.w	800683e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00d      	beq.n	800643e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006444:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d005      	beq.n	8006462 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800645a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800645e:	2b00      	cmp	r3, #0
 8006460:	d04f      	beq.n	8006502 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fe7f 	bl	8007166 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006472:	2b40      	cmp	r3, #64	; 0x40
 8006474:	d141      	bne.n	80064fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3308      	adds	r3, #8
 800647c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006484:	e853 3f00 	ldrex	r3, [r3]
 8006488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800648c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3308      	adds	r3, #8
 800649e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1d9      	bne.n	8006476 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d013      	beq.n	80064f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ce:	4a13      	ldr	r2, [pc, #76]	; (800651c <HAL_UART_IRQHandler+0x29c>)
 80064d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fc ffa8 	bl	800342c <HAL_DMA_Abort_IT>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d017      	beq.n	8006512 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064ec:	4610      	mov	r0, r2
 80064ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f0:	e00f      	b.n	8006512 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f9b8 	bl	8006868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f8:	e00b      	b.n	8006512 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f9b4 	bl	8006868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006500:	e007      	b.n	8006512 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f9b0 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006510:	e195      	b.n	800683e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006512:	bf00      	nop
    return;
 8006514:	e193      	b.n	800683e <HAL_UART_IRQHandler+0x5be>
 8006516:	bf00      	nop
 8006518:	04000120 	.word	0x04000120
 800651c:	0800722f 	.word	0x0800722f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006524:	2b01      	cmp	r3, #1
 8006526:	f040 814e 	bne.w	80067c6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800652a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 8147 	beq.w	80067c6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 8140 	beq.w	80067c6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2210      	movs	r2, #16
 800654c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	f040 80b8 	bne.w	80066ce <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800656a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8167 	beq.w	8006842 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800657a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800657e:	429a      	cmp	r2, r3
 8006580:	f080 815f 	bcs.w	8006842 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800658a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b00      	cmp	r3, #0
 800659c:	f040 8086 	bne.w	80066ac <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1da      	bne.n	80065a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3308      	adds	r3, #8
 800660a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800660e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006612:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006616:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e1      	bne.n	80065ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3308      	adds	r3, #8
 800662c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3308      	adds	r3, #8
 8006646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800664a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800664c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006650:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e3      	bne.n	8006626 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800667a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667c:	f023 0310 	bic.w	r3, r3, #16
 8006680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800668e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006690:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800669c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e4      	bne.n	800666c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fc fe82 	bl	80033b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066be:	b29b      	uxth	r3, r3
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f8d8 	bl	800687c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066cc:	e0b9      	b.n	8006842 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066da:	b29b      	uxth	r3, r3
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80ab 	beq.w	8006846 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80066f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 80a6 	beq.w	8006846 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800670e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800671c:	647b      	str	r3, [r7, #68]	; 0x44
 800671e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e4      	bne.n	80066fa <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3308      	adds	r3, #8
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	623b      	str	r3, [r7, #32]
   return(result);
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	f023 0301 	bic.w	r3, r3, #1
 8006746:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3308      	adds	r3, #8
 8006750:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006754:	633a      	str	r2, [r7, #48]	; 0x30
 8006756:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800675a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e3      	bne.n	8006730 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	60fb      	str	r3, [r7, #12]
   return(result);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f023 0310 	bic.w	r3, r3, #16
 8006790:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	461a      	mov	r2, r3
 800679a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800679e:	61fb      	str	r3, [r7, #28]
 80067a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	69b9      	ldr	r1, [r7, #24]
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	617b      	str	r3, [r7, #20]
   return(result);
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e4      	bne.n	800677c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2202      	movs	r2, #2
 80067b6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f85c 	bl	800687c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067c4:	e03f      	b.n	8006846 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00e      	beq.n	80067f0 <HAL_UART_IRQHandler+0x570>
 80067d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d008      	beq.n	80067f0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fd60 	bl	80072ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067ee:	e02d      	b.n	800684c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00e      	beq.n	800681a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01c      	beq.n	800684a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	4798      	blx	r3
    }
    return;
 8006818:	e017      	b.n	800684a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d012      	beq.n	800684c <HAL_UART_IRQHandler+0x5cc>
 8006826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00c      	beq.n	800684c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fd11 	bl	800725a <UART_EndTransmit_IT>
    return;
 8006838:	e008      	b.n	800684c <HAL_UART_IRQHandler+0x5cc>
      return;
 800683a:	bf00      	nop
 800683c:	e006      	b.n	800684c <HAL_UART_IRQHandler+0x5cc>
    return;
 800683e:	bf00      	nop
 8006840:	e004      	b.n	800684c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006842:	bf00      	nop
 8006844:	e002      	b.n	800684c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006846:	bf00      	nop
 8006848:	e000      	b.n	800684c <HAL_UART_IRQHandler+0x5cc>
    return;
 800684a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800684c:	37e8      	adds	r7, #232	; 0xe8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop

08006854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006898:	b08a      	sub	sp, #40	; 0x28
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4ba4      	ldr	r3, [pc, #656]	; (8006b54 <UART_SetConfig+0x2c0>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	6812      	ldr	r2, [r2, #0]
 80068ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a99      	ldr	r2, [pc, #612]	; (8006b58 <UART_SetConfig+0x2c4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fc:	4313      	orrs	r3, r2
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006910:	430a      	orrs	r2, r1
 8006912:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a90      	ldr	r2, [pc, #576]	; (8006b5c <UART_SetConfig+0x2c8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d126      	bne.n	800696c <UART_SetConfig+0xd8>
 800691e:	4b90      	ldr	r3, [pc, #576]	; (8006b60 <UART_SetConfig+0x2cc>)
 8006920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006924:	f003 0303 	and.w	r3, r3, #3
 8006928:	2b03      	cmp	r3, #3
 800692a:	d81b      	bhi.n	8006964 <UART_SetConfig+0xd0>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0xa0>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006945 	.word	0x08006945
 8006938:	08006955 	.word	0x08006955
 800693c:	0800694d 	.word	0x0800694d
 8006940:	0800695d 	.word	0x0800695d
 8006944:	2301      	movs	r3, #1
 8006946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694a:	e116      	b.n	8006b7a <UART_SetConfig+0x2e6>
 800694c:	2302      	movs	r3, #2
 800694e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006952:	e112      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006954:	2304      	movs	r3, #4
 8006956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695a:	e10e      	b.n	8006b7a <UART_SetConfig+0x2e6>
 800695c:	2308      	movs	r3, #8
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006962:	e10a      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006964:	2310      	movs	r3, #16
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696a:	e106      	b.n	8006b7a <UART_SetConfig+0x2e6>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a7c      	ldr	r2, [pc, #496]	; (8006b64 <UART_SetConfig+0x2d0>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d138      	bne.n	80069e8 <UART_SetConfig+0x154>
 8006976:	4b7a      	ldr	r3, [pc, #488]	; (8006b60 <UART_SetConfig+0x2cc>)
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697c:	f003 030c 	and.w	r3, r3, #12
 8006980:	2b0c      	cmp	r3, #12
 8006982:	d82d      	bhi.n	80069e0 <UART_SetConfig+0x14c>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0xf8>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069c1 	.word	0x080069c1
 8006990:	080069e1 	.word	0x080069e1
 8006994:	080069e1 	.word	0x080069e1
 8006998:	080069e1 	.word	0x080069e1
 800699c:	080069d1 	.word	0x080069d1
 80069a0:	080069e1 	.word	0x080069e1
 80069a4:	080069e1 	.word	0x080069e1
 80069a8:	080069e1 	.word	0x080069e1
 80069ac:	080069c9 	.word	0x080069c9
 80069b0:	080069e1 	.word	0x080069e1
 80069b4:	080069e1 	.word	0x080069e1
 80069b8:	080069e1 	.word	0x080069e1
 80069bc:	080069d9 	.word	0x080069d9
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c6:	e0d8      	b.n	8006b7a <UART_SetConfig+0x2e6>
 80069c8:	2302      	movs	r3, #2
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ce:	e0d4      	b.n	8006b7a <UART_SetConfig+0x2e6>
 80069d0:	2304      	movs	r3, #4
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e0d0      	b.n	8006b7a <UART_SetConfig+0x2e6>
 80069d8:	2308      	movs	r3, #8
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e0cc      	b.n	8006b7a <UART_SetConfig+0x2e6>
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e0c8      	b.n	8006b7a <UART_SetConfig+0x2e6>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a5e      	ldr	r2, [pc, #376]	; (8006b68 <UART_SetConfig+0x2d4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d125      	bne.n	8006a3e <UART_SetConfig+0x1aa>
 80069f2:	4b5b      	ldr	r3, [pc, #364]	; (8006b60 <UART_SetConfig+0x2cc>)
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069fc:	2b30      	cmp	r3, #48	; 0x30
 80069fe:	d016      	beq.n	8006a2e <UART_SetConfig+0x19a>
 8006a00:	2b30      	cmp	r3, #48	; 0x30
 8006a02:	d818      	bhi.n	8006a36 <UART_SetConfig+0x1a2>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d00a      	beq.n	8006a1e <UART_SetConfig+0x18a>
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d814      	bhi.n	8006a36 <UART_SetConfig+0x1a2>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <UART_SetConfig+0x182>
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d008      	beq.n	8006a26 <UART_SetConfig+0x192>
 8006a14:	e00f      	b.n	8006a36 <UART_SetConfig+0x1a2>
 8006a16:	2300      	movs	r3, #0
 8006a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1c:	e0ad      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a24:	e0a9      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a26:	2304      	movs	r3, #4
 8006a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2c:	e0a5      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a2e:	2308      	movs	r3, #8
 8006a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a34:	e0a1      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a36:	2310      	movs	r3, #16
 8006a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3c:	e09d      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a4a      	ldr	r2, [pc, #296]	; (8006b6c <UART_SetConfig+0x2d8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d125      	bne.n	8006a94 <UART_SetConfig+0x200>
 8006a48:	4b45      	ldr	r3, [pc, #276]	; (8006b60 <UART_SetConfig+0x2cc>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a52:	2bc0      	cmp	r3, #192	; 0xc0
 8006a54:	d016      	beq.n	8006a84 <UART_SetConfig+0x1f0>
 8006a56:	2bc0      	cmp	r3, #192	; 0xc0
 8006a58:	d818      	bhi.n	8006a8c <UART_SetConfig+0x1f8>
 8006a5a:	2b80      	cmp	r3, #128	; 0x80
 8006a5c:	d00a      	beq.n	8006a74 <UART_SetConfig+0x1e0>
 8006a5e:	2b80      	cmp	r3, #128	; 0x80
 8006a60:	d814      	bhi.n	8006a8c <UART_SetConfig+0x1f8>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <UART_SetConfig+0x1d8>
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d008      	beq.n	8006a7c <UART_SetConfig+0x1e8>
 8006a6a:	e00f      	b.n	8006a8c <UART_SetConfig+0x1f8>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a72:	e082      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a74:	2302      	movs	r3, #2
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7a:	e07e      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a82:	e07a      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a84:	2308      	movs	r3, #8
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8a:	e076      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a92:	e072      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a35      	ldr	r2, [pc, #212]	; (8006b70 <UART_SetConfig+0x2dc>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d12a      	bne.n	8006af4 <UART_SetConfig+0x260>
 8006a9e:	4b30      	ldr	r3, [pc, #192]	; (8006b60 <UART_SetConfig+0x2cc>)
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aac:	d01a      	beq.n	8006ae4 <UART_SetConfig+0x250>
 8006aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ab2:	d81b      	bhi.n	8006aec <UART_SetConfig+0x258>
 8006ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab8:	d00c      	beq.n	8006ad4 <UART_SetConfig+0x240>
 8006aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006abe:	d815      	bhi.n	8006aec <UART_SetConfig+0x258>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <UART_SetConfig+0x238>
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac8:	d008      	beq.n	8006adc <UART_SetConfig+0x248>
 8006aca:	e00f      	b.n	8006aec <UART_SetConfig+0x258>
 8006acc:	2300      	movs	r3, #0
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad2:	e052      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ada:	e04e      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006adc:	2304      	movs	r3, #4
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae2:	e04a      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aea:	e046      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af2:	e042      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a17      	ldr	r2, [pc, #92]	; (8006b58 <UART_SetConfig+0x2c4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d13a      	bne.n	8006b74 <UART_SetConfig+0x2e0>
 8006afe:	4b18      	ldr	r3, [pc, #96]	; (8006b60 <UART_SetConfig+0x2cc>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b0c:	d01a      	beq.n	8006b44 <UART_SetConfig+0x2b0>
 8006b0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b12:	d81b      	bhi.n	8006b4c <UART_SetConfig+0x2b8>
 8006b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b18:	d00c      	beq.n	8006b34 <UART_SetConfig+0x2a0>
 8006b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b1e:	d815      	bhi.n	8006b4c <UART_SetConfig+0x2b8>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <UART_SetConfig+0x298>
 8006b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b28:	d008      	beq.n	8006b3c <UART_SetConfig+0x2a8>
 8006b2a:	e00f      	b.n	8006b4c <UART_SetConfig+0x2b8>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b32:	e022      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006b34:	2302      	movs	r3, #2
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3a:	e01e      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b42:	e01a      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006b44:	2308      	movs	r3, #8
 8006b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4a:	e016      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006b4c:	2310      	movs	r3, #16
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b52:	e012      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006b54:	efff69f3 	.word	0xefff69f3
 8006b58:	40008000 	.word	0x40008000
 8006b5c:	40013800 	.word	0x40013800
 8006b60:	40021000 	.word	0x40021000
 8006b64:	40004400 	.word	0x40004400
 8006b68:	40004800 	.word	0x40004800
 8006b6c:	40004c00 	.word	0x40004c00
 8006b70:	40005000 	.word	0x40005000
 8006b74:	2310      	movs	r3, #16
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a9f      	ldr	r2, [pc, #636]	; (8006dfc <UART_SetConfig+0x568>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d17a      	bne.n	8006c7a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d824      	bhi.n	8006bd6 <UART_SetConfig+0x342>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <UART_SetConfig+0x300>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bd7 	.word	0x08006bd7
 8006b9c:	08006bc1 	.word	0x08006bc1
 8006ba0:	08006bd7 	.word	0x08006bd7
 8006ba4:	08006bc7 	.word	0x08006bc7
 8006ba8:	08006bd7 	.word	0x08006bd7
 8006bac:	08006bd7 	.word	0x08006bd7
 8006bb0:	08006bd7 	.word	0x08006bd7
 8006bb4:	08006bcf 	.word	0x08006bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb8:	f7fe f936 	bl	8004e28 <HAL_RCC_GetPCLK1Freq>
 8006bbc:	61f8      	str	r0, [r7, #28]
        break;
 8006bbe:	e010      	b.n	8006be2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc0:	4b8f      	ldr	r3, [pc, #572]	; (8006e00 <UART_SetConfig+0x56c>)
 8006bc2:	61fb      	str	r3, [r7, #28]
        break;
 8006bc4:	e00d      	b.n	8006be2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bc6:	f7fe f897 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8006bca:	61f8      	str	r0, [r7, #28]
        break;
 8006bcc:	e009      	b.n	8006be2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bd2:	61fb      	str	r3, [r7, #28]
        break;
 8006bd4:	e005      	b.n	8006be2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006be0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80fb 	beq.w	8006de0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	4413      	add	r3, r2
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d305      	bcc.n	8006c06 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d903      	bls.n	8006c0e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c0c:	e0e8      	b.n	8006de0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	2200      	movs	r2, #0
 8006c12:	461c      	mov	r4, r3
 8006c14:	4615      	mov	r5, r2
 8006c16:	f04f 0200 	mov.w	r2, #0
 8006c1a:	f04f 0300 	mov.w	r3, #0
 8006c1e:	022b      	lsls	r3, r5, #8
 8006c20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c24:	0222      	lsls	r2, r4, #8
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	6849      	ldr	r1, [r1, #4]
 8006c2a:	0849      	lsrs	r1, r1, #1
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	4688      	mov	r8, r1
 8006c30:	4681      	mov	r9, r0
 8006c32:	eb12 0a08 	adds.w	sl, r2, r8
 8006c36:	eb43 0b09 	adc.w	fp, r3, r9
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	603b      	str	r3, [r7, #0]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c48:	4650      	mov	r0, sl
 8006c4a:	4659      	mov	r1, fp
 8006c4c:	f7f9 fdf2 	bl	8000834 <__aeabi_uldivmod>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4613      	mov	r3, r2
 8006c56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c5e:	d308      	bcc.n	8006c72 <UART_SetConfig+0x3de>
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c66:	d204      	bcs.n	8006c72 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	60da      	str	r2, [r3, #12]
 8006c70:	e0b6      	b.n	8006de0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c78:	e0b2      	b.n	8006de0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c82:	d15e      	bne.n	8006d42 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006c84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d828      	bhi.n	8006cde <UART_SetConfig+0x44a>
 8006c8c:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <UART_SetConfig+0x400>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006cb9 	.word	0x08006cb9
 8006c98:	08006cc1 	.word	0x08006cc1
 8006c9c:	08006cc9 	.word	0x08006cc9
 8006ca0:	08006cdf 	.word	0x08006cdf
 8006ca4:	08006ccf 	.word	0x08006ccf
 8006ca8:	08006cdf 	.word	0x08006cdf
 8006cac:	08006cdf 	.word	0x08006cdf
 8006cb0:	08006cdf 	.word	0x08006cdf
 8006cb4:	08006cd7 	.word	0x08006cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb8:	f7fe f8b6 	bl	8004e28 <HAL_RCC_GetPCLK1Freq>
 8006cbc:	61f8      	str	r0, [r7, #28]
        break;
 8006cbe:	e014      	b.n	8006cea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cc0:	f7fe f8c8 	bl	8004e54 <HAL_RCC_GetPCLK2Freq>
 8006cc4:	61f8      	str	r0, [r7, #28]
        break;
 8006cc6:	e010      	b.n	8006cea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc8:	4b4d      	ldr	r3, [pc, #308]	; (8006e00 <UART_SetConfig+0x56c>)
 8006cca:	61fb      	str	r3, [r7, #28]
        break;
 8006ccc:	e00d      	b.n	8006cea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cce:	f7fe f813 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8006cd2:	61f8      	str	r0, [r7, #28]
        break;
 8006cd4:	e009      	b.n	8006cea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cda:	61fb      	str	r3, [r7, #28]
        break;
 8006cdc:	e005      	b.n	8006cea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ce8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d077      	beq.n	8006de0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	005a      	lsls	r2, r3, #1
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	085b      	lsrs	r3, r3, #1
 8006cfa:	441a      	add	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b0f      	cmp	r3, #15
 8006d0a:	d916      	bls.n	8006d3a <UART_SetConfig+0x4a6>
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d12:	d212      	bcs.n	8006d3a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f023 030f 	bic.w	r3, r3, #15
 8006d1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	085b      	lsrs	r3, r3, #1
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	8afb      	ldrh	r3, [r7, #22]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	8afa      	ldrh	r2, [r7, #22]
 8006d36:	60da      	str	r2, [r3, #12]
 8006d38:	e052      	b.n	8006de0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d40:	e04e      	b.n	8006de0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d827      	bhi.n	8006d9a <UART_SetConfig+0x506>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <UART_SetConfig+0x4bc>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d7d 	.word	0x08006d7d
 8006d58:	08006d85 	.word	0x08006d85
 8006d5c:	08006d9b 	.word	0x08006d9b
 8006d60:	08006d8b 	.word	0x08006d8b
 8006d64:	08006d9b 	.word	0x08006d9b
 8006d68:	08006d9b 	.word	0x08006d9b
 8006d6c:	08006d9b 	.word	0x08006d9b
 8006d70:	08006d93 	.word	0x08006d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d74:	f7fe f858 	bl	8004e28 <HAL_RCC_GetPCLK1Freq>
 8006d78:	61f8      	str	r0, [r7, #28]
        break;
 8006d7a:	e014      	b.n	8006da6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d7c:	f7fe f86a 	bl	8004e54 <HAL_RCC_GetPCLK2Freq>
 8006d80:	61f8      	str	r0, [r7, #28]
        break;
 8006d82:	e010      	b.n	8006da6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d84:	4b1e      	ldr	r3, [pc, #120]	; (8006e00 <UART_SetConfig+0x56c>)
 8006d86:	61fb      	str	r3, [r7, #28]
        break;
 8006d88:	e00d      	b.n	8006da6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d8a:	f7fd ffb5 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8006d8e:	61f8      	str	r0, [r7, #28]
        break;
 8006d90:	e009      	b.n	8006da6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d96:	61fb      	str	r3, [r7, #28]
        break;
 8006d98:	e005      	b.n	8006da6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006da4:	bf00      	nop
    }

    if (pclk != 0U)
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d019      	beq.n	8006de0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	085a      	lsrs	r2, r3, #1
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	441a      	add	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	2b0f      	cmp	r3, #15
 8006dc4:	d909      	bls.n	8006dda <UART_SetConfig+0x546>
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dcc:	d205      	bcs.n	8006dda <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60da      	str	r2, [r3, #12]
 8006dd8:	e002      	b.n	8006de0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006dec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3728      	adds	r7, #40	; 0x28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40008000 	.word	0x40008000
 8006e00:	00f42400 	.word	0x00f42400

08006e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	f003 0304 	and.w	r3, r3, #4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00a      	beq.n	8006eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01a      	beq.n	8006f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f02:	d10a      	bne.n	8006f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	605a      	str	r2, [r3, #4]
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b098      	sub	sp, #96	; 0x60
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f58:	f7fa fcf0 	bl	800193c <HAL_GetTick>
 8006f5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d12e      	bne.n	8006fca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f74:	2200      	movs	r2, #0
 8006f76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f88c 	bl	8007098 <UART_WaitOnFlagUntilTimeout>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d021      	beq.n	8006fca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8006fa6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006faa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e6      	bne.n	8006f86 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e062      	b.n	8007090 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d149      	bne.n	800706c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f856 	bl	8007098 <UART_WaitOnFlagUntilTimeout>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d03c      	beq.n	800706c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	623b      	str	r3, [r7, #32]
   return(result);
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007010:	633b      	str	r3, [r7, #48]	; 0x30
 8007012:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e6      	bne.n	8006ff2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3308      	adds	r3, #8
 800702a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	60fb      	str	r3, [r7, #12]
   return(result);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	64bb      	str	r3, [r7, #72]	; 0x48
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3308      	adds	r3, #8
 8007042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007044:	61fa      	str	r2, [r7, #28]
 8007046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	617b      	str	r3, [r7, #20]
   return(result);
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e5      	bne.n	8007024 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e011      	b.n	8007090 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2220      	movs	r2, #32
 8007070:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3758      	adds	r7, #88	; 0x58
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a8:	e049      	b.n	800713e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d045      	beq.n	800713e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070b2:	f7fa fc43 	bl	800193c <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d302      	bcc.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e048      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d031      	beq.n	800713e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	f003 0308 	and.w	r3, r3, #8
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	d110      	bne.n	800710a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2208      	movs	r2, #8
 80070ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f838 	bl	8007166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2208      	movs	r2, #8
 80070fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e029      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007118:	d111      	bne.n	800713e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f81e 	bl	8007166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e00f      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69da      	ldr	r2, [r3, #28]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4013      	ands	r3, r2
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	429a      	cmp	r2, r3
 800714c:	bf0c      	ite	eq
 800714e:	2301      	moveq	r3, #1
 8007150:	2300      	movne	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	429a      	cmp	r2, r3
 800715a:	d0a6      	beq.n	80070aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007166:	b480      	push	{r7}
 8007168:	b095      	sub	sp, #84	; 0x54
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718c:	643b      	str	r3, [r7, #64]	; 0x40
 800718e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e6      	bne.n	800716e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3308      	adds	r3, #8
 80071a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	e853 3f00 	ldrex	r3, [r3]
 80071ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f023 0301 	bic.w	r3, r3, #1
 80071b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e5      	bne.n	80071a0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d118      	bne.n	800720e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f023 0310 	bic.w	r3, r3, #16
 80071f0:	647b      	str	r3, [r7, #68]	; 0x44
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6979      	ldr	r1, [r7, #20]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	613b      	str	r3, [r7, #16]
   return(result);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e6      	bne.n	80071dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007222:	bf00      	nop
 8007224:	3754      	adds	r7, #84	; 0x54
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff fb0b 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b088      	sub	sp, #32
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	6979      	ldr	r1, [r7, #20]
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	613b      	str	r3, [r7, #16]
   return(result);
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e6      	bne.n	8007262 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2220      	movs	r2, #32
 8007298:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff fad7 	bl	8006854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072a6:	bf00      	nop
 80072a8:	3720      	adds	r7, #32
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072b6:	bf00      	nop
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <memset>:
 80072c2:	4402      	add	r2, r0
 80072c4:	4603      	mov	r3, r0
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d100      	bne.n	80072cc <memset+0xa>
 80072ca:	4770      	bx	lr
 80072cc:	f803 1b01 	strb.w	r1, [r3], #1
 80072d0:	e7f9      	b.n	80072c6 <memset+0x4>
	...

080072d4 <__errno>:
 80072d4:	4b01      	ldr	r3, [pc, #4]	; (80072dc <__errno+0x8>)
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000064 	.word	0x20000064

080072e0 <__libc_init_array>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	4d0d      	ldr	r5, [pc, #52]	; (8007318 <__libc_init_array+0x38>)
 80072e4:	4c0d      	ldr	r4, [pc, #52]	; (800731c <__libc_init_array+0x3c>)
 80072e6:	1b64      	subs	r4, r4, r5
 80072e8:	10a4      	asrs	r4, r4, #2
 80072ea:	2600      	movs	r6, #0
 80072ec:	42a6      	cmp	r6, r4
 80072ee:	d109      	bne.n	8007304 <__libc_init_array+0x24>
 80072f0:	4d0b      	ldr	r5, [pc, #44]	; (8007320 <__libc_init_array+0x40>)
 80072f2:	4c0c      	ldr	r4, [pc, #48]	; (8007324 <__libc_init_array+0x44>)
 80072f4:	f000 f83a 	bl	800736c <_init>
 80072f8:	1b64      	subs	r4, r4, r5
 80072fa:	10a4      	asrs	r4, r4, #2
 80072fc:	2600      	movs	r6, #0
 80072fe:	42a6      	cmp	r6, r4
 8007300:	d105      	bne.n	800730e <__libc_init_array+0x2e>
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	f855 3b04 	ldr.w	r3, [r5], #4
 8007308:	4798      	blx	r3
 800730a:	3601      	adds	r6, #1
 800730c:	e7ee      	b.n	80072ec <__libc_init_array+0xc>
 800730e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007312:	4798      	blx	r3
 8007314:	3601      	adds	r6, #1
 8007316:	e7f2      	b.n	80072fe <__libc_init_array+0x1e>
 8007318:	080073e0 	.word	0x080073e0
 800731c:	080073e0 	.word	0x080073e0
 8007320:	080073e0 	.word	0x080073e0
 8007324:	080073e4 	.word	0x080073e4

08007328 <sqrtf>:
 8007328:	b508      	push	{r3, lr}
 800732a:	ed2d 8b02 	vpush	{d8}
 800732e:	eeb0 8a40 	vmov.f32	s16, s0
 8007332:	f000 f817 	bl	8007364 <__ieee754_sqrtf>
 8007336:	eeb4 8a48 	vcmp.f32	s16, s16
 800733a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733e:	d60c      	bvs.n	800735a <sqrtf+0x32>
 8007340:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007360 <sqrtf+0x38>
 8007344:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800734c:	d505      	bpl.n	800735a <sqrtf+0x32>
 800734e:	f7ff ffc1 	bl	80072d4 <__errno>
 8007352:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007356:	2321      	movs	r3, #33	; 0x21
 8007358:	6003      	str	r3, [r0, #0]
 800735a:	ecbd 8b02 	vpop	{d8}
 800735e:	bd08      	pop	{r3, pc}
 8007360:	00000000 	.word	0x00000000

08007364 <__ieee754_sqrtf>:
 8007364:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007368:	4770      	bx	lr
	...

0800736c <_init>:
 800736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736e:	bf00      	nop
 8007370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007372:	bc08      	pop	{r3}
 8007374:	469e      	mov	lr, r3
 8007376:	4770      	bx	lr

08007378 <_fini>:
 8007378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737a:	bf00      	nop
 800737c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737e:	bc08      	pop	{r3}
 8007380:	469e      	mov	lr, r3
 8007382:	4770      	bx	lr
